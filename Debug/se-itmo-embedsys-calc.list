
se-itmo-embedsys-calc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006444  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007188  08007188  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007190  08007190  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08007198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          000004d0  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d8  200006d8  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106ac  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d25  00000000  00000000  000308e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00033610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  000345d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002587b  00000000  00000000  00035438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b9b  00000000  00000000  0005acb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6257  00000000  00000000  0006d84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143aa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049c8  00000000  00000000  00143af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080065dc 	.word	0x080065dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	080065dc 	.word	0x080065dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295
 80002be:	f000 b9bf 	b.w	8000640 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <newnode>:

#include <stdlib.h>

#include "ast.h"

struct AST *newnode(struct AST ast) {
 8000644:	b084      	sub	sp, #16
 8000646:	b5b0      	push	{r4, r5, r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	f107 0418 	add.w	r4, r7, #24
 8000650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct AST *const node = malloc(sizeof(struct AST));
 8000654:	2018      	movs	r0, #24
 8000656:	f004 fed9 	bl	800540c <malloc>
 800065a:	4603      	mov	r3, r0
 800065c:	607b      	str	r3, [r7, #4]
    *node = ast;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	461d      	mov	r5, r3
 8000662:	f107 0418 	add.w	r4, r7, #24
 8000666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800066e:	e885 0003 	stmia.w	r5, {r0, r1}
    return node;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800067e:	b004      	add	sp, #16
 8000680:	4770      	bx	lr

08000682 <_lit>:

struct AST _lit(int64_t value) {
 8000682:	b480      	push	{r7}
 8000684:	b08b      	sub	sp, #44	; 0x2c
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	e9c7 2300 	strd	r2, r3, [r7]
    return (struct AST) {AST_LIT, .as_literal = {value}};
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	461a      	mov	r2, r3
 8000692:	2300      	movs	r3, #0
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	6053      	str	r3, [r2, #4]
 8000698:	6093      	str	r3, [r2, #8]
 800069a:	60d3      	str	r3, [r2, #12]
 800069c:	6113      	str	r3, [r2, #16]
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	372c      	adds	r7, #44	; 0x2c
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <lit>:

struct AST *lit(int64_t value) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	e9c7 0100 	strd	r0, r1, [r7]
    return newnode(_lit(value));
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006ce:	4608      	mov	r0, r1
 80006d0:	f7ff ffd7 	bl	8000682 <_lit>
 80006d4:	466a      	mov	r2, sp
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006de:	e882 0003 	stmia.w	r2, {r0, r1}
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e8:	f7ff ffac 	bl	8000644 <newnode>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_unop>:

struct AST _unop(enum unop_type type, struct AST *operand) {
 80006f6:	b480      	push	{r7}
 80006f8:	b08b      	sub	sp, #44	; 0x2c
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	460b      	mov	r3, r1
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	72fb      	strb	r3, [r7, #11]
    return (struct AST) {AST_UNOP, .as_unop = {type, operand}};
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	461a      	mov	r2, r3
 8000708:	2300      	movs	r3, #0
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	6053      	str	r3, [r2, #4]
 800070e:	6093      	str	r3, [r2, #8]
 8000710:	60d3      	str	r3, [r2, #12]
 8000712:	6113      	str	r3, [r2, #16]
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	7afa      	ldrb	r2, [r7, #11]
 8000720:	721a      	strb	r2, [r3, #8]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]
}
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	372c      	adds	r7, #44	; 0x2c
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <unop>:

struct AST *unop(enum unop_type type, struct AST *operand) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af02      	add	r7, sp, #8
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
    return newnode(_unop(type, operand));
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	79f9      	ldrb	r1, [r7, #7]
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffd4 	bl	80006f6 <_unop>
 800074e:	466a      	mov	r2, sp
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000758:	e882 0003 	stmia.w	r2, {r0, r1}
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000762:	f7ff ff6f 	bl	8000644 <newnode>
 8000766:	4603      	mov	r3, r0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <_binop>:

struct AST _binop(enum binop_type type, struct AST *left, struct AST *right) {
 8000770:	b480      	push	{r7}
 8000772:	b08b      	sub	sp, #44	; 0x2c
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	72fb      	strb	r3, [r7, #11]
    return (struct AST) {AST_BINOP, .as_binop = {type, left, right}};
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	461a      	mov	r2, r3
 8000784:	2300      	movs	r3, #0
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	6053      	str	r3, [r2, #4]
 800078a:	6093      	str	r3, [r2, #8]
 800078c:	60d3      	str	r3, [r2, #12]
 800078e:	6113      	str	r3, [r2, #16]
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	7afa      	ldrb	r2, [r7, #11]
 8000796:	721a      	strb	r2, [r3, #8]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	611a      	str	r2, [r3, #16]
}
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	372c      	adds	r7, #44	; 0x2c
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <binop>:

struct AST *binop(enum binop_type type, struct AST *left, struct AST *right) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	4603      	mov	r3, r0
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	73fb      	strb	r3, [r7, #15]
    return newnode(_binop(type, left, right));
 80007be:	f107 0010 	add.w	r0, r7, #16
 80007c2:	7bf9      	ldrb	r1, [r7, #15]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f7ff ffd2 	bl	8000770 <_binop>
 80007cc:	466a      	mov	r2, sp
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e0:	f7ff ff30 	bl	8000644 <newnode>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <parse_unop_neg>:
#define DEFINE_SIMPLE_UNOP_PARSER(unop, operation)        \
static int64_t parse_unop_##unop(struct AST *operand) { \
    return operation calc_ast(operand);      \
}

DEFINE_SIMPLE_UNOP_PARSER(neg, -)
 80007ee:	b5b0      	push	{r4, r5, r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f9ec 	bl	8000bd4 <calc_ast>
 80007fc:	4602      	mov	r2, r0
 80007fe:	460b      	mov	r3, r1
 8000800:	2100      	movs	r1, #0
 8000802:	4254      	negs	r4, r2
 8000804:	eb61 0503 	sbc.w	r5, r1, r3
 8000808:	4622      	mov	r2, r4
 800080a:	462b      	mov	r3, r5
 800080c:	4610      	mov	r0, r2
 800080e:	4619      	mov	r1, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bdb0      	pop	{r4, r5, r7, pc}

08000816 <parse_unop_negl>:
DEFINE_SIMPLE_UNOP_PARSER(negl, !)
 8000816:	b5b0      	push	{r4, r5, r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d8 	bl	8000bd4 <calc_ast>
 8000824:	4602      	mov	r2, r0
 8000826:	460b      	mov	r3, r1
 8000828:	4313      	orrs	r3, r2
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf0c      	ite	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	2300      	movne	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2200      	movs	r2, #0
 8000838:	461c      	mov	r4, r3
 800083a:	4615      	mov	r5, r2
 800083c:	4622      	mov	r2, r4
 800083e:	462b      	mov	r3, r5
 8000840:	4610      	mov	r0, r2
 8000842:	4619      	mov	r1, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bdb0      	pop	{r4, r5, r7, pc}

0800084a <factorial>:

static int64_t factorial(int64_t n) {
 800084a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	e9c7 0100 	strd	r0, r1, [r7]
    return (n == 0) ? 1 : (n * factorial(n-1));
 8000856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800085a:	4313      	orrs	r3, r2
 800085c:	d018      	beq.n	8000890 <factorial+0x46>
 800085e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000862:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000866:	f143 39ff 	adc.w	r9, r3, #4294967295
 800086a:	4640      	mov	r0, r8
 800086c:	4649      	mov	r1, r9
 800086e:	f7ff ffec 	bl	800084a <factorial>
 8000872:	4602      	mov	r2, r0
 8000874:	460b      	mov	r3, r1
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	fb03 f001 	mul.w	r0, r3, r1
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	fb02 f101 	mul.w	r1, r2, r1
 8000882:	4401      	add	r1, r0
 8000884:	6838      	ldr	r0, [r7, #0]
 8000886:	fba0 4502 	umull	r4, r5, r0, r2
 800088a:	194b      	adds	r3, r1, r5
 800088c:	461d      	mov	r5, r3
 800088e:	e003      	b.n	8000898 <factorial+0x4e>
 8000890:	f04f 0401 	mov.w	r4, #1
 8000894:	f04f 0500 	mov.w	r5, #0
 8000898:	4622      	mov	r2, r4
 800089a:	462b      	mov	r3, r5
}
 800089c:	4610      	mov	r0, r2
 800089e:	4619      	mov	r1, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080008a8 <parse_unop_fact>:

static int64_t parse_unop_fact(struct AST *ast) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    return factorial(calc_ast(ast));
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f98f 	bl	8000bd4 <calc_ast>
 80008b6:	4602      	mov	r2, r0
 80008b8:	460b      	mov	r3, r1
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	f7ff ffc4 	bl	800084a <factorial>
 80008c2:	4602      	mov	r2, r0
 80008c4:	460b      	mov	r3, r1
}
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <parse_binop_add>:
#define DEFINE_SIMPLE_BINOP_PARSER(binop, operation) \
static int64_t parse_binop_##binop(struct AST *left, struct AST *right) { \
    return calc_ast(left) operation calc_ast(right); \
}

DEFINE_SIMPLE_BINOP_PARSER(add, +)
 80008d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 f979 	bl	8000bd4 <calc_ast>
 80008e2:	4604      	mov	r4, r0
 80008e4:	460d      	mov	r5, r1
 80008e6:	6838      	ldr	r0, [r7, #0]
 80008e8:	f000 f974 	bl	8000bd4 <calc_ast>
 80008ec:	4602      	mov	r2, r0
 80008ee:	460b      	mov	r3, r1
 80008f0:	eb14 0802 	adds.w	r8, r4, r2
 80008f4:	eb45 0903 	adc.w	r9, r5, r3
 80008f8:	4642      	mov	r2, r8
 80008fa:	464b      	mov	r3, r9
 80008fc:	4610      	mov	r0, r2
 80008fe:	4619      	mov	r1, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000908 <parse_binop_sub>:
DEFINE_SIMPLE_BINOP_PARSER(sub, -)
 8000908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f95d 	bl	8000bd4 <calc_ast>
 800091a:	4604      	mov	r4, r0
 800091c:	460d      	mov	r5, r1
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 f958 	bl	8000bd4 <calc_ast>
 8000924:	4602      	mov	r2, r0
 8000926:	460b      	mov	r3, r1
 8000928:	ebb4 0802 	subs.w	r8, r4, r2
 800092c:	eb65 0903 	sbc.w	r9, r5, r3
 8000930:	4642      	mov	r2, r8
 8000932:	464b      	mov	r3, r9
 8000934:	4610      	mov	r0, r2
 8000936:	4619      	mov	r1, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000940 <parse_binop_mul>:
DEFINE_SIMPLE_BINOP_PARSER(mul, *)
 8000940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f941 	bl	8000bd4 <calc_ast>
 8000952:	4604      	mov	r4, r0
 8000954:	460d      	mov	r5, r1
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f000 f93c 	bl	8000bd4 <calc_ast>
 800095c:	4602      	mov	r2, r0
 800095e:	460b      	mov	r3, r1
 8000960:	fb02 f005 	mul.w	r0, r2, r5
 8000964:	fb04 f103 	mul.w	r1, r4, r3
 8000968:	4401      	add	r1, r0
 800096a:	fba4 8902 	umull	r8, r9, r4, r2
 800096e:	eb01 0309 	add.w	r3, r1, r9
 8000972:	4699      	mov	r9, r3
 8000974:	4642      	mov	r2, r8
 8000976:	464b      	mov	r3, r9
 8000978:	4610      	mov	r0, r2
 800097a:	4619      	mov	r1, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000984 <parse_binop_div>:
DEFINE_SIMPLE_BINOP_PARSER(div, /)
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f920 	bl	8000bd4 <calc_ast>
 8000994:	4604      	mov	r4, r0
 8000996:	460d      	mov	r5, r1
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f000 f91b 	bl	8000bd4 <calc_ast>
 800099e:	4602      	mov	r2, r0
 80009a0:	460b      	mov	r3, r1
 80009a2:	4620      	mov	r0, r4
 80009a4:	4629      	mov	r1, r5
 80009a6:	f7ff fc7b 	bl	80002a0 <__aeabi_ldivmod>
 80009aa:	4602      	mov	r2, r0
 80009ac:	460b      	mov	r3, r1
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bdb0      	pop	{r4, r5, r7, pc}

080009b8 <parse_binop_mod>:
DEFINE_SIMPLE_BINOP_PARSER(mod, %)
 80009b8:	b5b0      	push	{r4, r5, r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f906 	bl	8000bd4 <calc_ast>
 80009c8:	4604      	mov	r4, r0
 80009ca:	460d      	mov	r5, r1
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f000 f901 	bl	8000bd4 <calc_ast>
 80009d2:	4602      	mov	r2, r0
 80009d4:	460b      	mov	r3, r1
 80009d6:	4620      	mov	r0, r4
 80009d8:	4629      	mov	r1, r5
 80009da:	f7ff fc61 	bl	80002a0 <__aeabi_ldivmod>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bdb0      	pop	{r4, r5, r7, pc}

080009e8 <parse_binop_and>:
DEFINE_SIMPLE_BINOP_PARSER(and, &&)
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 f8ee 	bl	8000bd4 <calc_ast>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	4313      	orrs	r3, r2
 80009fe:	d008      	beq.n	8000a12 <parse_binop_and+0x2a>
 8000a00:	6838      	ldr	r0, [r7, #0]
 8000a02:	f000 f8e7 	bl	8000bd4 <calc_ast>
 8000a06:	4602      	mov	r2, r0
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	d001      	beq.n	8000a12 <parse_binop_and+0x2a>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <parse_binop_and+0x2c>
 8000a12:	2300      	movs	r3, #0
 8000a14:	17da      	asrs	r2, r3, #31
 8000a16:	461c      	mov	r4, r3
 8000a18:	4615      	mov	r5, r2
 8000a1a:	4622      	mov	r2, r4
 8000a1c:	462b      	mov	r3, r5
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bdb0      	pop	{r4, r5, r7, pc}

08000a28 <parse_binop_or>:
DEFINE_SIMPLE_BINOP_PARSER(or, ||)
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f8ce 	bl	8000bd4 <calc_ast>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	d106      	bne.n	8000a4e <parse_binop_or+0x26>
 8000a40:	6838      	ldr	r0, [r7, #0]
 8000a42:	f000 f8c7 	bl	8000bd4 <calc_ast>
 8000a46:	4602      	mov	r2, r0
 8000a48:	460b      	mov	r3, r1
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	d001      	beq.n	8000a52 <parse_binop_or+0x2a>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <parse_binop_or+0x2c>
 8000a52:	2300      	movs	r3, #0
 8000a54:	17da      	asrs	r2, r3, #31
 8000a56:	461c      	mov	r4, r3
 8000a58:	4615      	mov	r5, r2
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	462b      	mov	r3, r5
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bdb0      	pop	{r4, r5, r7, pc}

08000a68 <impl>:

#undef DEFINE_SIMPLE_BINOP_PARSER

static int64_t impl(int64_t left, int64_t right) {
 8000a68:	b4b0      	push	{r4, r5, r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000a72:	e9c7 2300 	strd	r2, r3, [r7]
    return !left||right;
 8000a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	d003      	beq.n	8000a86 <impl+0x1e>
 8000a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	d001      	beq.n	8000a8a <impl+0x22>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <impl+0x24>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	17da      	asrs	r2, r3, #31
 8000a8e:	461c      	mov	r4, r3
 8000a90:	4615      	mov	r5, r2
 8000a92:	4622      	mov	r2, r4
 8000a94:	462b      	mov	r3, r5
}
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bcb0      	pop	{r4, r5, r7}
 8000aa0:	4770      	bx	lr

08000aa2 <bicond>:

static int64_t bicond(int64_t left, int64_t right) {
 8000aa2:	b4b0      	push	{r4, r5, r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000aac:	e9c7 2300 	strd	r2, r3, [r7]
    return (!left||right)&&(!right||left);
 8000ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	d003      	beq.n	8000ac0 <bicond+0x1e>
 8000ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	d009      	beq.n	8000ad4 <bicond+0x32>
 8000ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	d003      	beq.n	8000ad0 <bicond+0x2e>
 8000ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	d001      	beq.n	8000ad4 <bicond+0x32>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <bicond+0x34>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	17da      	asrs	r2, r3, #31
 8000ad8:	461c      	mov	r4, r3
 8000ada:	4615      	mov	r5, r2
 8000adc:	4622      	mov	r2, r4
 8000ade:	462b      	mov	r3, r5
}
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bcb0      	pop	{r4, r5, r7}
 8000aea:	4770      	bx	lr

08000aec <parse_binop_implication>:

static int64_t parse_binop_implication(struct AST *left, struct AST *right) {
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
    return impl(calc_ast(left), calc_ast(right));
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f86c 	bl	8000bd4 <calc_ast>
 8000afc:	4604      	mov	r4, r0
 8000afe:	460d      	mov	r5, r1
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 f867 	bl	8000bd4 <calc_ast>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	f7ff ffab 	bl	8000a68 <impl>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
}
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bdb0      	pop	{r4, r5, r7, pc}

08000b20 <parse_binop_bicondition>:

static int64_t parse_binop_bicondition(struct AST *left, struct AST *right) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    return bicond(calc_ast(left), calc_ast(right));
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f852 	bl	8000bd4 <calc_ast>
 8000b30:	4604      	mov	r4, r0
 8000b32:	460d      	mov	r5, r1
 8000b34:	6838      	ldr	r0, [r7, #0]
 8000b36:	f000 f84d 	bl	8000bd4 <calc_ast>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	4620      	mov	r0, r4
 8000b40:	4629      	mov	r1, r5
 8000b42:	f7ff ffae 	bl	8000aa2 <bicond>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
}
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bdb0      	pop	{r4, r5, r7, pc}

08000b54 <parse_lit>:
        [BIN_BIC] = parse_binop_bicondition
};

// AST TYPE

static int64_t parse_lit(struct AST *ast) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    return ast->as_literal.value;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
}
 8000b62:	4610      	mov	r0, r2
 8000b64:	4619      	mov	r1, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <parse_unop>:

static int64_t parse_unop(struct AST *ast) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
    return unop_parsers[ast->as_unop.type](ast->as_unop.operand);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7a1b      	ldrb	r3, [r3, #8]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <parse_unop+0x2c>)
 8000b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	68d2      	ldr	r2, [r2, #12]
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4798      	blx	r3
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
}
 8000b90:	4610      	mov	r0, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000000 	.word	0x20000000

08000ba0 <parse_binop>:

static int64_t parse_binop(struct AST *ast) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    return binop_parsers[ast->as_binop.type](ast->as_binop.left, ast->as_binop.right);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7a1b      	ldrb	r3, [r3, #8]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <parse_binop+0x30>)
 8000bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	68d0      	ldr	r0, [r2, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6912      	ldr	r2, [r2, #16]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4798      	blx	r3
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
}
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <calc_ast>:
static parser *ast_parsers[] = {
        [AST_LIT] = parse_lit, [AST_UNOP] = parse_unop, [AST_BINOP] = parse_binop
};


int64_t calc_ast(struct AST *ast) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if (ast)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <calc_ast+0x24>
        return ast_parsers[ast->type](ast);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <calc_ast+0x38>)
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	4798      	blx	r3
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	e003      	b.n	8000c00 <calc_ast+0x2c>
    else
        return 0;
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
}
 8000c00:	4610      	mov	r0, r2
 8000c02:	4619      	mov	r1, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000030 	.word	0x20000030

08000c10 <add>:
#define DECLARE_BINOP(fun, code)                                             \
static struct AST *fun(struct AST *left, struct AST *right) {                \
  return binop(BIN_##code, left, right);                                     \
}

DECLARE_BINOP(add, PLUS)
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fdc6 	bl	80007b0 <binop>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <mul>:
DECLARE_BINOP(mul, MUL)
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff fdb7 	bl	80007b0 <binop>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <sub>:
DECLARE_BINOP(sub, MINUS)
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fda8 	bl	80007b0 <binop>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <divide>:
DECLARE_BINOP(divide, DIV)
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f7ff fd99 	bl	80007b0 <binop>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <mod>:
DECLARE_BINOP(mod, MOD)
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2004      	movs	r0, #4
 8000c98:	f7ff fd8a 	bl	80007b0 <binop>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <and>:
DECLARE_BINOP(and, AND)
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	2005      	movs	r0, #5
 8000cb6:	f7ff fd7b 	bl	80007b0 <binop>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <or>:
DECLARE_BINOP(or, OR)
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f7ff fd6c 	bl	80007b0 <binop>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <implication>:
DECLARE_BINOP(implication, IMPL)
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	2007      	movs	r0, #7
 8000cf2:	f7ff fd5d 	bl	80007b0 <binop>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <bicondition>:
DECLARE_BINOP(bicondition, BIC)
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	2008      	movs	r0, #8
 8000d10:	f7ff fd4e 	bl	80007b0 <binop>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <neg>:
#define DECLARE_UNOP(fun, code)                                              \
static struct AST *fun(struct AST *operand) {                                \
  return unop(UN_##code, operand);                                           \
}

DECLARE_UNOP(neg, NEG)
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fd03 	bl	8000734 <unop>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <negl>:
DECLARE_UNOP(negl, NEGL)
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff fcf6 	bl	8000734 <unop>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <fact>:
DECLARE_UNOP(fact, FACT)
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fce9 	bl	8000734 <unop>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <token_print>:

#include "ast.h"
#include "ring.h"
#include "tokenizer.h"

void token_print(struct token token) { printf("%s(%" PRId64 ")", TOKENS_STR[token.type], token.value); }
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	463c      	mov	r4, r7
 8000d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d78:	783b      	ldrb	r3, [r7, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <token_print+0x28>)
 8000d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d86:	4804      	ldr	r0, [pc, #16]	; (8000d98 <token_print+0x2c>)
 8000d88:	f004 ff34 	bl	8005bf4 <iprintf>
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000158 	.word	0x20000158
 8000d98:	080065f4 	.word	0x080065f4

08000d9c <ring_ast_create>:

DECLARE_RING(ast, struct AST)

DEFINE_RING(ast, struct AST)
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	b5b0      	push	{r4, r5, r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	f107 0418 	add.w	r4, r7, #24
 8000da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dac:	2020      	movs	r0, #32
 8000dae:	f004 fb2d 	bl	800540c <malloc>
 8000db2:	4603      	mov	r3, r0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <ring_ast_create+0x24>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e010      	b.n	8000de2 <ring_ast_create+0x46>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	f107 0418 	add.w	r4, r7, #24
 8000dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	619a      	str	r2, [r3, #24]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	61da      	str	r2, [r3, #28]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <ring_ast_push>:
 8000df0:	b082      	sub	sp, #8
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af02      	add	r7, sp, #8
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	f107 0118 	add.w	r1, r7, #24
 8000dfe:	e881 000c 	stmia.w	r1, {r2, r3}
 8000e02:	466a      	mov	r2, sp
 8000e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e16:	f7ff ffc1 	bl	8000d9c <ring_ast_create>
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <ring_ast_push+0x36>
 8000e22:	2300      	movs	r3, #0
 8000e24:	e01b      	b.n	8000e5e <ring_ast_push+0x6e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <ring_ast_push+0x48>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	e012      	b.n	8000e5e <ring_ast_push+0x6e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	69da      	ldr	r2, [r3, #28]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	61da      	str	r2, [r3, #28]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	619a      	str	r2, [r3, #24]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	61da      	str	r2, [r3, #28]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e68:	b002      	add	sp, #8
 8000e6a:	4770      	bx	lr

08000e6c <ring_ast_pop>:
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10a      	bne.n	8000e92 <ring_ast_pop+0x26>
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	461c      	mov	r4, r3
 8000e82:	4615      	mov	r5, r2
 8000e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e90:	e03a      	b.n	8000f08 <ring_ast_pop+0x9c>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	f107 0408 	add.w	r4, r7, #8
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d110      	bne.n	8000eda <ring_ast_pop+0x6e>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ec0:	f004 faac 	bl	800541c <free>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	f107 0408 	add.w	r4, r7, #8
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed8:	e016      	b.n	8000f08 <ring_ast_pop+0x9c>
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eea:	69d2      	ldr	r2, [r2, #28]
 8000eec:	61da      	str	r2, [r3, #28]
 8000eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef0:	f004 fa94 	bl	800541c <free>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	f107 0408 	add.w	r4, r7, #8
 8000efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bdb0      	pop	{r4, r5, r7, pc}

08000f10 <ring_ast_free>:
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d015      	beq.n	8000f4c <ring_ast_free+0x3c>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
 8000f2a:	e00a      	b.n	8000f42 <ring_ast_free+0x32>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	699a      	ldr	r2, [r3, #24]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f004 fa6d 	bl	800541c <free>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f0      	bne.n	8000f2c <ring_ast_free+0x1c>
 8000f4a:	e000      	b.n	8000f4e <ring_ast_free+0x3e>
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <ring_token_create>:

DEFINE_RING_PRINT(ast, ast_print)

#define RETURN_ERROR(code, msg) return printf(msg), code

DEFINE_RING(token, struct token)
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f60:	2018      	movs	r0, #24
 8000f62:	f004 fa53 	bl	800540c <malloc>
 8000f66:	4603      	mov	r3, r0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <ring_token_create+0x20>
 8000f70:	2300      	movs	r3, #0
 8000f72:	e00c      	b.n	8000f8e <ring_token_create+0x3a>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	461c      	mov	r4, r3
 8000f78:	463b      	mov	r3, r7
 8000f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <ring_token_last>:
 8000f96:	b490      	push	{r4, r7}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <ring_token_last+0x20>
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	461c      	mov	r4, r3
 8000fac:	4613      	mov	r3, r2
 8000fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fb4:	e006      	b.n	8000fc4 <ring_token_last+0x2e>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc90      	pop	{r4, r7}
 8000fcc:	4770      	bx	lr

08000fce <ring_token_push>:
 8000fce:	b082      	sub	sp, #8
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	f107 0118 	add.w	r1, r7, #24
 8000fdc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe6:	f7ff ffb5 	bl	8000f54 <ring_token_create>
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <ring_token_push+0x28>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e01b      	b.n	800102e <ring_token_push+0x60>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <ring_token_push+0x3a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	e012      	b.n	800102e <ring_token_push+0x60>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001038:	b002      	add	sp, #8
 800103a:	4770      	bx	lr

0800103c <ring_token_pop>:
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <ring_token_pop+0x20>
 800104c:	2200      	movs	r2, #0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	461c      	mov	r4, r3
 8001052:	4613      	mov	r3, r2
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800105a:	e030      	b.n	80010be <ring_token_pop+0x82>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f107 0408 	add.w	r4, r7, #8
 800106a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	429a      	cmp	r2, r3
 8001078:	d10d      	bne.n	8001096 <ring_token_pop+0x5a>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	69f8      	ldr	r0, [r7, #28]
 8001082:	f004 f9cb 	bl	800541c <free>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	461c      	mov	r4, r3
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001094:	e013      	b.n	80010be <ring_token_pop+0x82>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	6952      	ldr	r2, [r2, #20]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	69f8      	ldr	r0, [r7, #28]
 80010ac:	f004 f9b6 	bl	800541c <free>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	461c      	mov	r4, r3
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}

080010c6 <ring_token_pop_top>:
 80010c6:	b590      	push	{r4, r7, lr}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <ring_token_pop_top+0x20>
 80010d6:	2200      	movs	r2, #0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	461c      	mov	r4, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010e4:	e009      	b.n	80010fa <ring_token_pop_top+0x34>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffa1 	bl	800103c <ring_token_pop>
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}

08001102 <ring_token_free>:
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d015      	beq.n	800113e <ring_token_free+0x3c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	e00a      	b.n	8001134 <ring_token_free+0x32>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f004 f974 	bl	800541c <free>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <ring_token_free+0x1c>
 800113c:	e000      	b.n	8001140 <ring_token_free+0x3e>
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <ring_token_print>:

DEFINE_RING_PRINT(token, token_print)
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	4812      	ldr	r0, [pc, #72]	; (800119c <ring_token_print+0x54>)
 8001152:	f004 fd4f 	bl	8005bf4 <iprintf>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <ring_token_print+0x1c>
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <ring_token_print+0x58>)
 800115e:	f004 fdcf 	bl	8005d00 <puts>
 8001162:	e018      	b.n	8001196 <ring_token_print+0x4e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001168:	f7ff fe00 	bl	8000d6c <token_print>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e009      	b.n	8001188 <ring_token_print+0x40>
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <ring_token_print+0x5c>)
 8001176:	f004 fd3d 	bl	8005bf4 <iprintf>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117e:	f7ff fdf5 	bl	8000d6c <token_print>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d1f1      	bne.n	8001174 <ring_token_print+0x2c>
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <ring_token_print+0x60>)
 8001192:	f004 fdb5 	bl	8005d00 <puts>
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08006600 	.word	0x08006600
 80011a0:	08006604 	.word	0x08006604
 80011a4:	08006610 	.word	0x08006610
 80011a8:	08006618 	.word	0x08006618

080011ac <build_binop>:
        [TOK_NEG] = neg,
        [TOK_FACT] = fact,
        [TOK_NEGL] = negl
};

static struct AST *build_binop(struct ring_ast **ast_build, struct token operator) {
 80011ac:	b082      	sub	sp, #8
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b092      	sub	sp, #72	; 0x48
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80011ba:	e881 000c 	stmia.w	r1, {r2, r3}
    struct AST* right = newnode(ring_ast_pop(ast_build));
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe51 	bl	8000e6c <ring_ast_pop>
 80011ca:	466a      	mov	r2, sp
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011de:	f7ff fa31 	bl	8000644 <newnode>
 80011e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    struct AST* left = newnode(ring_ast_pop(ast_build));
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe3e 	bl	8000e6c <ring_ast_pop>
 80011f0:	466a      	mov	r2, sp
 80011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011fa:	e882 0003 	stmia.w	r2, {r0, r1}
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	f7ff fa1e 	bl	8000644 <newnode>
 8001208:	63b8      	str	r0, [r7, #56]	; 0x38
    return binop_builders[operator.type](left, right);
 800120a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800120e:	461a      	mov	r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <build_binop+0x80>)
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800121a:	4798      	blx	r3
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001228:	b002      	add	sp, #8
 800122a:	4770      	bx	lr
 800122c:	2000003c 	.word	0x2000003c

08001230 <build_unop>:

static struct AST *build_unop(struct ring_ast **ast_build, struct token operator) {
 8001230:	b082      	sub	sp, #8
 8001232:	b590      	push	{r4, r7, lr}
 8001234:	b08b      	sub	sp, #44	; 0x2c
 8001236:	af02      	add	r7, sp, #8
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800123e:	e881 000c 	stmia.w	r1, {r2, r3}
    return unop_builders[operator.type]
 8001242:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001246:	461a      	mov	r2, r3
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <build_unop+0x58>)
 800124a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe09 	bl	8000e6c <ring_ast_pop>
 800125a:	466a      	mov	r2, sp
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001264:	e882 0003 	stmia.w	r2, {r0, r1}
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126e:	f7ff f9e9 	bl	8000644 <newnode>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	47a0      	blx	r4
 8001278:	4603      	mov	r3, r0
            (newnode(ring_ast_pop(ast_build)));

}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001284:	b002      	add	sp, #8
 8001286:	4770      	bx	lr
 8001288:	20000060 	.word	0x20000060

0800128c <build_lit>:

static struct AST *build_lit(struct ring_ast **ast_stack, struct token operator) {
 800128c:	b082      	sub	sp, #8
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	f107 0110 	add.w	r1, r7, #16
 800129a:	e881 000c 	stmia.w	r1, {r2, r3}
    return lit(operator.value);
 800129e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fa09 	bl	80006bc <lit>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012b6:	b002      	add	sp, #8
 80012b8:	4770      	bx	lr

080012ba <lit_to_ast_map>:
        [AST_UNOP] = build_unop,
        [AST_BINOP] = build_binop,
        [AST_LIT] = build_lit,
};

static size_t lit_to_ast_map(struct token tok) {
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	463c      	mov	r4, r7
 80012c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tok.type == TOK_LIT) return AST_LIT;
 80012c6:	783b      	ldrb	r3, [r7, #0]
 80012c8:	2b0d      	cmp	r3, #13
 80012ca:	d101      	bne.n	80012d0 <lit_to_ast_map+0x16>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e013      	b.n	80012f8 <lit_to_ast_map+0x3e>
    if (is_binop(tok)) return AST_BINOP;
 80012d0:	463b      	mov	r3, r7
 80012d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d4:	f001 fbb8 	bl	8002a48 <is_binop>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <lit_to_ast_map+0x28>
 80012de:	2300      	movs	r3, #0
 80012e0:	e00a      	b.n	80012f8 <lit_to_ast_map+0x3e>
    if (is_unop(tok)) return AST_UNOP;
 80012e2:	463b      	mov	r3, r7
 80012e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e6:	f001 fbdb 	bl	8002aa0 <is_unop>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <lit_to_ast_map+0x3a>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e001      	b.n	80012f8 <lit_to_ast_map+0x3e>
    return -1;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <build_node>:

static struct AST *build_node(struct ring_ast **ast_stack, struct token tok) {
 8001300:	b082      	sub	sp, #8
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b087      	sub	sp, #28
 8001306:	af02      	add	r7, sp, #8
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	f107 0120 	add.w	r1, r7, #32
 800130e:	e881 000c 	stmia.w	r1, {r2, r3}
    size_t ast_type = lit_to_ast_map(tok);
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001318:	f7ff ffcf 	bl	80012ba <lit_to_ast_map>
 800131c:	60f8      	str	r0, [r7, #12]
    if (ast_type == -1) return NULL;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d101      	bne.n	800132a <build_node+0x2a>
 8001326:	2300      	movs	r3, #0
 8001328:	e010      	b.n	800134c <build_node+0x4c>
    return builders[ast_type](ast_stack, tok);
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <build_node+0x5c>)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001332:	466a      	mov	r2, sp
 8001334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001338:	e893 0003 	ldmia.w	r3, {r0, r1}
 800133c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	cb0c      	ldmia	r3, {r2, r3}
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	47a0      	blx	r4
 800134a:	4603      	mov	r3, r0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001356:	b002      	add	sp, #8
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000009c 	.word	0x2000009c

08001360 <build_ast>:
        [TOK_NEGL] = 6,
        [TOK_NEG] = 6,
        [TOK_FACT] = 6
};

struct AST *build_ast(char *str) {
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	b0af      	sub	sp, #188	; 0xbc
 8001364:	af04      	add	r7, sp, #16
 8001366:	6178      	str	r0, [r7, #20]
    struct ring_token *tokens = NULL;
 8001368:	2300      	movs	r3, #0
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
    if ((tokens = tokenize(str)) == NULL)
 800136c:	6978      	ldr	r0, [r7, #20]
 800136e:	f001 fbb1 	bl	8002ad4 <tokenize>
 8001372:	4603      	mov	r3, r0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
 8001376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001378:	2b00      	cmp	r3, #0
 800137a:	d104      	bne.n	8001386 <build_ast+0x26>
        RETURN_ERROR(NULL, "Tokenization error.\n");
 800137c:	48a7      	ldr	r0, [pc, #668]	; (800161c <build_ast+0x2bc>)
 800137e:	f004 fcbf 	bl	8005d00 <puts>
 8001382:	2300      	movs	r3, #0
 8001384:	e145      	b.n	8001612 <build_ast+0x2b2>

    ring_token_print(tokens);
 8001386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fedd 	bl	8001148 <ring_token_print>

    struct ring_ast *ast_stack = NULL;
 800138e:	2300      	movs	r3, #0
 8001390:	643b      	str	r3, [r7, #64]	; 0x40
    struct ring_token *ops_stack = NULL;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (tokens != NULL) {
 8001396:	e0ed      	b.n	8001574 <build_ast+0x214>
        struct token tok = ring_token_pop_top(&tokens);
 8001398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe8f 	bl	80010c6 <ring_token_pop_top>
        if (tok.type == TOK_LIT) {
 80013a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ac:	2b0d      	cmp	r3, #13
 80013ae:	d11d      	bne.n	80013ec <build_ast+0x8c>
            ring_ast_push(&ast_stack, *build_node(&ast_stack, tok));
 80013b0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80013b4:	466a      	mov	r2, sp
 80013b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013be:	e882 0003 	stmia.w	r2, {r0, r1}
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	cb0c      	ldmia	r3, {r2, r3}
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff ff99 	bl	8001300 <build_node>
 80013ce:	4604      	mov	r4, r0
 80013d0:	f107 0640 	add.w	r6, r7, #64	; 0x40
 80013d4:	466d      	mov	r5, sp
 80013d6:	f104 0308 	add.w	r3, r4, #8
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013e0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013e4:	4630      	mov	r0, r6
 80013e6:	f7ff fd03 	bl	8000df0 <ring_ast_push>
 80013ea:	e0c3      	b.n	8001574 <build_ast+0x214>
        } else if (is_binop(tok) || is_unop(tok)) {
 80013ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f2:	f001 fb29 	bl	8002a48 <is_binop>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d13d      	bne.n	8001478 <build_ast+0x118>
 80013fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001402:	f001 fb4d 	bl	8002aa0 <is_unop>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d060      	beq.n	80014ce <build_ast+0x16e>
            while ((ops_stack != NULL) && (ast_stack != NULL) &&
 800140c:	e034      	b.n	8001478 <build_ast+0x118>
                   (PRECEDENCES[ring_token_last(ops_stack).type] >= PRECEDENCES[tok.type])) {
                struct token operator = ring_token_pop(&ops_stack);
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe0f 	bl	800103c <ring_token_pop>
                if (is_binop(operator) || is_unop(operator)) {
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	f001 fb10 	bl	8002a48 <is_binop>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <build_ast+0xde>
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	f001 fb34 	bl	8002aa0 <is_unop>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d037      	beq.n	80014ae <build_ast+0x14e>
                    ring_ast_push(&ast_stack, *build_node(&ast_stack, operator));
 800143e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001442:	466a      	mov	r2, sp
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800144c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	cb0c      	ldmia	r3, {r2, r3}
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff ff52 	bl	8001300 <build_node>
 800145c:	4604      	mov	r4, r0
 800145e:	f107 0640 	add.w	r6, r7, #64	; 0x40
 8001462:	466d      	mov	r5, sp
 8001464:	f104 0308 	add.w	r3, r4, #8
 8001468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800146e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001472:	4630      	mov	r0, r6
 8001474:	f7ff fcbc 	bl	8000df0 <ring_ast_push>
            while ((ops_stack != NULL) && (ast_stack != NULL) &&
 8001478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d017      	beq.n	80014ae <build_ast+0x14e>
 800147e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d014      	beq.n	80014ae <build_ast+0x14e>
                   (PRECEDENCES[ring_token_last(ops_stack).type] >= PRECEDENCES[tok.type])) {
 8001484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001486:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fd82 	bl	8000f96 <ring_token_last>
 8001492:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001496:	461a      	mov	r2, r3
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <build_ast+0x2c0>)
 800149a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800149e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <build_ast+0x2c0>)
 80014a6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
            while ((ops_stack != NULL) && (ast_stack != NULL) &&
 80014aa:	429a      	cmp	r2, r3
 80014ac:	daaf      	bge.n	800140e <build_ast+0xae>
                } else break;
            }
            ring_token_push(&ops_stack, tok);
 80014ae:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80014b2:	466a      	mov	r2, sp
 80014b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80014c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c4:	cb0c      	ldmia	r3, {r2, r3}
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fd81 	bl	8000fce <ring_token_push>
 80014cc:	e052      	b.n	8001574 <build_ast+0x214>
        } else if (tok.type == TOK_OPEN) {
 80014ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014d2:	2b0b      	cmp	r3, #11
 80014d4:	d10f      	bne.n	80014f6 <build_ast+0x196>
            ring_token_push(&ops_stack, tok);
 80014d6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80014da:	466a      	mov	r2, sp
 80014dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80014e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ec:	cb0c      	ldmia	r3, {r2, r3}
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fd6d 	bl	8000fce <ring_token_push>
 80014f4:	e03e      	b.n	8001574 <build_ast+0x214>
        } else if (tok.type == TOK_CLOSE) {
 80014f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d13a      	bne.n	8001574 <build_ast+0x214>
            while ((ops_stack != NULL) && ring_token_last(ops_stack).type != TOK_OPEN) {
 80014fe:	e024      	b.n	800154a <build_ast+0x1ea>
                ring_ast_push(&ast_stack, *build_node(&ast_stack, ring_token_pop(&ops_stack)));
 8001500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001504:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd96 	bl	800103c <ring_token_pop>
 8001510:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001514:	466a      	mov	r2, sp
 8001516:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800151a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800151e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001526:	cb0c      	ldmia	r3, {r2, r3}
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff fee9 	bl	8001300 <build_node>
 800152e:	4604      	mov	r4, r0
 8001530:	f107 0640 	add.w	r6, r7, #64	; 0x40
 8001534:	466d      	mov	r5, sp
 8001536:	f104 0308 	add.w	r3, r4, #8
 800153a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001540:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001544:	4630      	mov	r0, r6
 8001546:	f7ff fc53 	bl	8000df0 <ring_ast_push>
            while ((ops_stack != NULL) && ring_token_last(ops_stack).type != TOK_OPEN) {
 800154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00a      	beq.n	8001566 <build_ast+0x206>
 8001550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001552:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fd1c 	bl	8000f96 <ring_token_last>
 800155e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001562:	2b0b      	cmp	r3, #11
 8001564:	d1cc      	bne.n	8001500 <build_ast+0x1a0>
            }
            ring_token_pop(&ops_stack);
 8001566:	463b      	mov	r3, r7
 8001568:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fd64 	bl	800103c <ring_token_pop>
    while (tokens != NULL) {
 8001574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001576:	2b00      	cmp	r3, #0
 8001578:	f47f af0e 	bne.w	8001398 <build_ast+0x38>
        }
    }
    while (ops_stack != NULL) {
 800157c:	e024      	b.n	80015c8 <build_ast+0x268>
        ring_ast_push(&ast_stack, *build_node(&ast_stack, ring_token_pop(&ops_stack)));
 800157e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001582:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd57 	bl	800103c <ring_token_pop>
 800158e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001592:	466a      	mov	r2, sp
 8001594:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001598:	e893 0003 	ldmia.w	r3, {r0, r1}
 800159c:	e882 0003 	stmia.w	r2, {r0, r1}
 80015a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015a4:	cb0c      	ldmia	r3, {r2, r3}
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff feaa 	bl	8001300 <build_node>
 80015ac:	4604      	mov	r4, r0
 80015ae:	f107 0640 	add.w	r6, r7, #64	; 0x40
 80015b2:	466d      	mov	r5, sp
 80015b4:	f104 0308 	add.w	r3, r4, #8
 80015b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015c2:	4630      	mov	r0, r6
 80015c4:	f7ff fc14 	bl	8000df0 <ring_ast_push>
    while (ops_stack != NULL) {
 80015c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1d7      	bne.n	800157e <build_ast+0x21e>
    }

    struct AST *result = newnode(ring_ast_pop(&ast_stack));
 80015ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc47 	bl	8000e6c <ring_ast_pop>
 80015de:	466a      	mov	r2, sp
 80015e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80015ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f2:	f7ff f827 	bl	8000644 <newnode>
 80015f6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    ring_token_free(&tokens);
 80015fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd7f 	bl	8001102 <ring_token_free>
    ring_ast_free(&ast_stack);
 8001604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc81 	bl	8000f10 <ring_ast_free>


    return result;
 800160e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 8001612:	4618      	mov	r0, r3
 8001614:	37ac      	adds	r7, #172	; 0xac
 8001616:	46bd      	mov	sp, r7
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161a:	bf00      	nop
 800161c:	08006638 	.word	0x08006638
 8001620:	08006848 	.word	0x08006848

08001624 <calc_expr>:
#include "ast.h"
#include "stdbool.h"

#include "string.h"

static int64_t calc_expr(char *input) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    return calc_ast(build_ast(input));
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe97 	bl	8001360 <build_ast>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff facd 	bl	8000bd4 <calc_ast>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
}
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <calc_Action_Add_0>:
        strcat(calc->buf, ch); \
        calc->cur += strlen(ch); \
} \


IMPLEMENT_ADD_ACTION(0, "0")
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f103 0408 	add.w	r4, r3, #8
 8001656:	4620      	mov	r0, r4
 8001658:	f7fe fdca 	bl	80001f0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	4423      	add	r3, r4
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <calc_Action_Add_0+0x34>)
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	8013      	strh	r3, [r2, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	0800664c 	.word	0x0800664c

08001680 <calc_Action_Add_1>:
IMPLEMENT_ADD_ACTION(1, "1")
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f103 0408 	add.w	r4, r3, #8
 800168e:	4620      	mov	r0, r4
 8001690:	f7fe fdae 	bl	80001f0 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	4423      	add	r3, r4
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <calc_Action_Add_1+0x34>)
 800169a:	461a      	mov	r2, r3
 800169c:	460b      	mov	r3, r1
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	8013      	strh	r3, [r2, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	08006650 	.word	0x08006650

080016b8 <calc_Action_Add_2>:
IMPLEMENT_ADD_ACTION(2, "2")
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 0408 	add.w	r4, r3, #8
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7fe fd92 	bl	80001f0 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4423      	add	r3, r4
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <calc_Action_Add_2+0x34>)
 80016d2:	461a      	mov	r2, r3
 80016d4:	460b      	mov	r3, r1
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	8013      	strh	r3, [r2, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	08006654 	.word	0x08006654

080016f0 <calc_Action_Add_3>:
IMPLEMENT_ADD_ACTION(3, "3")
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f103 0408 	add.w	r4, r3, #8
 80016fe:	4620      	mov	r0, r4
 8001700:	f7fe fd76 	bl	80001f0 <strlen>
 8001704:	4603      	mov	r3, r0
 8001706:	4423      	add	r3, r4
 8001708:	4906      	ldr	r1, [pc, #24]	; (8001724 <calc_Action_Add_3+0x34>)
 800170a:	461a      	mov	r2, r3
 800170c:	460b      	mov	r3, r1
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	8013      	strh	r3, [r2, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	08006658 	.word	0x08006658

08001728 <calc_Action_Add_4>:
IMPLEMENT_ADD_ACTION(4, "4")
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f103 0408 	add.w	r4, r3, #8
 8001736:	4620      	mov	r0, r4
 8001738:	f7fe fd5a 	bl	80001f0 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	4423      	add	r3, r4
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <calc_Action_Add_4+0x34>)
 8001742:	461a      	mov	r2, r3
 8001744:	460b      	mov	r3, r1
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	8013      	strh	r3, [r2, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	0800665c 	.word	0x0800665c

08001760 <calc_Action_Add_5>:
IMPLEMENT_ADD_ACTION(5, "5")
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f103 0408 	add.w	r4, r3, #8
 800176e:	4620      	mov	r0, r4
 8001770:	f7fe fd3e 	bl	80001f0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	4423      	add	r3, r4
 8001778:	4906      	ldr	r1, [pc, #24]	; (8001794 <calc_Action_Add_5+0x34>)
 800177a:	461a      	mov	r2, r3
 800177c:	460b      	mov	r3, r1
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	8013      	strh	r3, [r2, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	08006660 	.word	0x08006660

08001798 <calc_Action_Add_6>:
IMPLEMENT_ADD_ACTION(6, "6")
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f103 0408 	add.w	r4, r3, #8
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7fe fd22 	bl	80001f0 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4423      	add	r3, r4
 80017b0:	4906      	ldr	r1, [pc, #24]	; (80017cc <calc_Action_Add_6+0x34>)
 80017b2:	461a      	mov	r2, r3
 80017b4:	460b      	mov	r3, r1
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	8013      	strh	r3, [r2, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	08006664 	.word	0x08006664

080017d0 <calc_Action_Add_7>:
IMPLEMENT_ADD_ACTION(7, "7")
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f103 0408 	add.w	r4, r3, #8
 80017de:	4620      	mov	r0, r4
 80017e0:	f7fe fd06 	bl	80001f0 <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4423      	add	r3, r4
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <calc_Action_Add_7+0x34>)
 80017ea:	461a      	mov	r2, r3
 80017ec:	460b      	mov	r3, r1
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	8013      	strh	r3, [r2, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	08006668 	.word	0x08006668

08001808 <calc_Action_Add_8>:
IMPLEMENT_ADD_ACTION(8, "8")
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 0408 	add.w	r4, r3, #8
 8001816:	4620      	mov	r0, r4
 8001818:	f7fe fcea 	bl	80001f0 <strlen>
 800181c:	4603      	mov	r3, r0
 800181e:	4423      	add	r3, r4
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <calc_Action_Add_8+0x34>)
 8001822:	461a      	mov	r2, r3
 8001824:	460b      	mov	r3, r1
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	8013      	strh	r3, [r2, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	0800666c 	.word	0x0800666c

08001840 <calc_Action_Add_9>:
IMPLEMENT_ADD_ACTION(9, "9")
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f103 0408 	add.w	r4, r3, #8
 800184e:	4620      	mov	r0, r4
 8001850:	f7fe fcce 	bl	80001f0 <strlen>
 8001854:	4603      	mov	r3, r0
 8001856:	4423      	add	r3, r4
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <calc_Action_Add_9+0x34>)
 800185a:	461a      	mov	r2, r3
 800185c:	460b      	mov	r3, r1
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	8013      	strh	r3, [r2, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	08006670 	.word	0x08006670

08001878 <calc_Action_Add_Plus>:

IMPLEMENT_ADD_ACTION(Plus, "+")
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f103 0408 	add.w	r4, r3, #8
 8001886:	4620      	mov	r0, r4
 8001888:	f7fe fcb2 	bl	80001f0 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	4423      	add	r3, r4
 8001890:	4906      	ldr	r1, [pc, #24]	; (80018ac <calc_Action_Add_Plus+0x34>)
 8001892:	461a      	mov	r2, r3
 8001894:	460b      	mov	r3, r1
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	8013      	strh	r3, [r2, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	08006674 	.word	0x08006674

080018b0 <calc_Action_Add_Sub>:
IMPLEMENT_ADD_ACTION(Sub, "-")
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f103 0408 	add.w	r4, r3, #8
 80018be:	4620      	mov	r0, r4
 80018c0:	f7fe fc96 	bl	80001f0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4423      	add	r3, r4
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <calc_Action_Add_Sub+0x34>)
 80018ca:	461a      	mov	r2, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	8013      	strh	r3, [r2, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	08006678 	.word	0x08006678

080018e8 <calc_Action_Add_Mul>:
IMPLEMENT_ADD_ACTION(Mul, "*")
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f103 0408 	add.w	r4, r3, #8
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7fe fc7a 	bl	80001f0 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4423      	add	r3, r4
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <calc_Action_Add_Mul+0x34>)
 8001902:	461a      	mov	r2, r3
 8001904:	460b      	mov	r3, r1
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	8013      	strh	r3, [r2, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	0800667c 	.word	0x0800667c

08001920 <calc_Action_Add_Div>:
IMPLEMENT_ADD_ACTION(Div, "/")
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f103 0408 	add.w	r4, r3, #8
 800192e:	4620      	mov	r0, r4
 8001930:	f7fe fc5e 	bl	80001f0 <strlen>
 8001934:	4603      	mov	r3, r0
 8001936:	4423      	add	r3, r4
 8001938:	4906      	ldr	r1, [pc, #24]	; (8001954 <calc_Action_Add_Div+0x34>)
 800193a:	461a      	mov	r2, r3
 800193c:	460b      	mov	r3, r1
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	8013      	strh	r3, [r2, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	08006680 	.word	0x08006680

08001958 <calc_Action_Add_Fact>:

IMPLEMENT_ADD_ACTION(Fact, "!")
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f103 0408 	add.w	r4, r3, #8
 8001966:	4620      	mov	r0, r4
 8001968:	f7fe fc42 	bl	80001f0 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	4423      	add	r3, r4
 8001970:	4906      	ldr	r1, [pc, #24]	; (800198c <calc_Action_Add_Fact+0x34>)
 8001972:	461a      	mov	r2, r3
 8001974:	460b      	mov	r3, r1
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	8013      	strh	r3, [r2, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	08006684 	.word	0x08006684

08001990 <calc_Action_Add_Open_Bracket>:

IMPLEMENT_ADD_ACTION(Open_Bracket, "(")
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f103 0408 	add.w	r4, r3, #8
 800199e:	4620      	mov	r0, r4
 80019a0:	f7fe fc26 	bl	80001f0 <strlen>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4423      	add	r3, r4
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <calc_Action_Add_Open_Bracket+0x34>)
 80019aa:	461a      	mov	r2, r3
 80019ac:	460b      	mov	r3, r1
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	8013      	strh	r3, [r2, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	08006688 	.word	0x08006688

080019c8 <calc_Action_Add_Close_Bracket>:
IMPLEMENT_ADD_ACTION(Close_Bracket, ")")
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 0408 	add.w	r4, r3, #8
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7fe fc0a 	bl	80001f0 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	4423      	add	r3, r4
 80019e0:	4906      	ldr	r1, [pc, #24]	; (80019fc <calc_Action_Add_Close_Bracket+0x34>)
 80019e2:	461a      	mov	r2, r3
 80019e4:	460b      	mov	r3, r1
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	8013      	strh	r3, [r2, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	0800668c 	.word	0x0800668c

08001a00 <calc_Action_Change_Layout>:

#undef IMPLEMENT_ADD_ACTION

static void calc_Action_Change_Layout(struct calculator_i *calc) {
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    calc->layout = (calc->layout + 1) % LAYOUTS_N;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <int64_to_string>:

static void int64_to_string(int64_t num, char *str) {
 8001a26:	b5b0      	push	{r4, r5, r7, lr}
 8001a28:	b08a      	sub	sp, #40	; 0x28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
    int64_t n = num;
 8001a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a36:	e9c7 2308 	strd	r2, r3, [r7, #32]
    bool is_negative = false;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	77fb      	strb	r3, [r7, #31]
    int i = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]

    if (n < 0) {
 8001a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da09      	bge.n	8001a5e <int64_to_string+0x38>
        is_negative = true;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]
        n = -n;
 8001a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a52:	2100      	movs	r1, #0
 8001a54:	4254      	negs	r4, r2
 8001a56:	eb61 0503 	sbc.w	r5, r1, r3
 8001a5a:	e9c7 4508 	strd	r4, r5, [r7, #32]
    }

    do {
        str[i++] = '0' + (n % 10);
 8001a5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a62:	f04f 020a 	mov.w	r2, #10
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f7fe fc19 	bl	80002a0 <__aeabi_ldivmod>
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	61b9      	str	r1, [r7, #24]
 8001a76:	4619      	mov	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3230      	adds	r2, #48	; 0x30
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
        n /= 10;
 8001a82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a86:	f04f 020a 	mov.w	r2, #10
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f7fe fc07 	bl	80002a0 <__aeabi_ldivmod>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    } while (n > 0);
 8001a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	f173 0300 	sbcs.w	r3, r3, #0
 8001aa4:	dadb      	bge.n	8001a5e <int64_to_string+0x38>

    if (is_negative) {
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <int64_to_string+0x96>
        str[i++] = '-';
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	61ba      	str	r2, [r7, #24]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	222d      	movs	r2, #45	; 0x2d
 8001aba:	701a      	strb	r2, [r3, #0]
    }

    for (int j = 0; j < i / 2; j++) {
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e01a      	b.n	8001af8 <int64_to_string+0xd2>
        char tmp = str[j];
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	74fb      	strb	r3, [r7, #19]
        str[j] = str[i - j - 1];
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	441a      	add	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	440b      	add	r3, r1
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	701a      	strb	r2, [r3, #0]
        str[i - j - 1] = tmp;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	7cfa      	ldrb	r2, [r7, #19]
 8001af0:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < i / 2; j++) {
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	0fda      	lsrs	r2, r3, #31
 8001afc:	4413      	add	r3, r2
 8001afe:	105b      	asrs	r3, r3, #1
 8001b00:	461a      	mov	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	dbdc      	blt.n	8001ac2 <int64_to_string+0x9c>
    }

    str[i] = '\0';
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bdb0      	pop	{r4, r5, r7, pc}

08001b1a <calc_Apply_Equation>:

static void calc_Apply_Equation(struct calculator_i *calc) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	int64_t res = calc_expr(calc->buf);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3308      	adds	r3, #8
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fd7c 	bl	8001624 <calc_expr>
 8001b2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int64_to_string(res, calc->buf);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3308      	adds	r3, #8
 8001b34:	461a      	mov	r2, r3
 8001b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b3a:	f7ff ff74 	bl	8001a26 <int64_to_string>
    calc->cur = strlen(calc->buf);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3308      	adds	r3, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fb54 	bl	80001f0 <strlen>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
    calc->last = calc->cur;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	605a      	str	r2, [r3, #4]
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <calc_Action_CE>:

static void calc_Action_CE(struct calculator_i *calc) {
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
    for (size_t i = calc->last; i < sizeof(calc->buf); i++) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e008      	b.n	8001b80 <calc_Action_CE+0x22>
        calc->buf[i] = '\0';
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	3308      	adds	r3, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    for (size_t i = calc->last; i < sizeof(calc->buf); i++) {
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b7f      	cmp	r3, #127	; 0x7f
 8001b84:	d9f3      	bls.n	8001b6e <calc_Action_CE+0x10>
    }
    calc->cur = calc->last;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <calc_Action_C>:

static void calc_Action_C(struct calculator_i *calc) {
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < sizeof(calc->buf); i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e008      	b.n	8001bba <calc_Action_C+0x20>
        calc->buf[i] = '\0';
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	3308      	adds	r3, #8
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(calc->buf); i++) {
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bbe:	d9f3      	bls.n	8001ba8 <calc_Action_C+0xe>
    }
    calc->last = 0;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
    calc->cur = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <calc_Action_Backspace>:

static void calc_Action_Backspace(struct calculator_i *calc) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	calc->buf[calc->cur-1] = '\0';
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	721a      	strb	r2, [r3, #8]
	calc->cur -= 1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	1e5a      	subs	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <calc_Call_Action>:
                calc_Action_Add_Fact, NULL,                calc_Action_Backspace,
                calc_Action_CE,       calc_Action_C,       calc_Action_Change_Layout
        }
};

void calc_Call_Action(struct calculator_i *calc, uint8_t index) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
    calc_Action *action = actions[calc->layout][index];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c16:	78f9      	ldrb	r1, [r7, #3]
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <calc_Call_Action+0x58>)
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c28:	60fb      	str	r3, [r7, #12]
    if(action == NULL) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <calc_Call_Action+0x4e>
        return;
    }
    action(calc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
    if(calc->layout != LAYOUT_DEFAULT && action != calc_Action_Change_Layout) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <calc_Call_Action+0x50>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <calc_Call_Action+0x5c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d005      	beq.n	8001c54 <calc_Call_Action+0x50>
        calc->layout = LAYOUT_DEFAULT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001c50:	e000      	b.n	8001c54 <calc_Call_Action+0x50>
        return;
 8001c52:	bf00      	nop
    }
}
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200000a8 	.word	0x200000a8
 8001c60:	08001a01 	.word	0x08001a01

08001c64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_GPIO_Init+0x84>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <MX_I2C1_Init+0x78>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <MX_I2C1_Init+0x7c>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d2a:	f001 faed 	bl	8003308 <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f000 f9d0 	bl	80020d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d3c:	f002 faa3 	bl	8004286 <HAL_I2CEx_ConfigAnalogFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d46:	f000 f9c7 	bl	80020d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_I2C1_Init+0x74>)
 8001d4e:	f002 fad6 	bl	80042fe <HAL_I2CEx_ConfigDigitalFilter>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d58:	f000 f9be 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000224 	.word	0x20000224
 8001d64:	40005400 	.word	0x40005400
 8001d68:	000186a0 	.word	0x000186a0

08001d6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_I2C_MspInit+0x84>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12c      	bne.n	8001de8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_I2C_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_I2C_MspInit+0x88>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_I2C_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db0:	2312      	movs	r3, #18
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <HAL_I2C_MspInit+0x8c>)
 8001dc8:	f001 f8f2 	bl	8002fb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_I2C_MspInit+0x88>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_I2C_MspInit+0x88>)
 8001dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_I2C_MspInit+0x88>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400

08001dfc <Set_Keyboard>:
#include "sdk_uart.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 8001e0a:	1dbb      	adds	r3, r7, #6
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2102      	movs	r1, #2
 8001e10:	20e2      	movs	r0, #226	; 0xe2
 8001e12:	f000 fbaf 	bl	8002574 <PCA9538_Write_Register>
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <Set_Keyboard+0x2e>
		UART_Transmit((uint8_t*)"Error write polarity\n");
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <Set_Keyboard+0x58>)
 8001e22:	f000 fbd9 	bl	80025d8 <UART_Transmit>
		return ret;
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	e010      	b.n	8001e4c <Set_Keyboard+0x50>
	}

	buf = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 8001e2e:	1dbb      	adds	r3, r7, #6
 8001e30:	461a      	mov	r2, r3
 8001e32:	2101      	movs	r1, #1
 8001e34:	20e2      	movs	r0, #226	; 0xe2
 8001e36:	f000 fb9d 	bl	8002574 <PCA9538_Write_Register>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <Set_Keyboard+0x4e>
		UART_Transmit((uint8_t*)"Error write output\n");
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <Set_Keyboard+0x5c>)
 8001e46:	f000 fbc7 	bl	80025d8 <UART_Transmit>
	}

	return ret;
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08006690 	.word	0x08006690
 8001e58:	080066a8 	.word	0x080066a8

08001e5c <Scan_Row>:


uint8_t Scan_Row( uint8_t  Nrow ) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73bb      	strb	r3, [r7, #14]
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 8001e6e:	f7ff ffc5 	bl	8001dfc <Set_Keyboard>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <Scan_Row+0x26>
		UART_Transmit((uint8_t*)"Error write init\n");
 8001e7c:	4823      	ldr	r0, [pc, #140]	; (8001f0c <Scan_Row+0xb0>)
 8001e7e:	f000 fbab 	bl	80025d8 <UART_Transmit>
	}

	buf = Nrow;
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	733b      	strb	r3, [r7, #12]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	20e2      	movs	r0, #226	; 0xe2
 8001e90:	f000 fb70 	bl	8002574 <PCA9538_Write_Register>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <Scan_Row+0x48>
		UART_Transmit((uint8_t*)"Error write config\n");
 8001e9e:	481c      	ldr	r0, [pc, #112]	; (8001f10 <Scan_Row+0xb4>)
 8001ea0:	f000 fb9a 	bl	80025d8 <UART_Transmit>
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	20e2      	movs	r0, #226	; 0xe2
 8001eac:	f000 fb82 	bl	80025b4 <PCA9538_Read_Inputs>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <Scan_Row+0x64>
		UART_Transmit((uint8_t*)"Read error\n");
 8001eba:	4816      	ldr	r0, [pc, #88]	; (8001f14 <Scan_Row+0xb8>)
 8001ebc:	f000 fb8c 	bl	80025d8 <UART_Transmit>
	}

	kbd_in = buf & 0x70;
 8001ec0:	7b3b      	ldrb	r3, [r7, #12]
 8001ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec6:	737b      	strb	r3, [r7, #13]
	Nkey = kbd_in;
 8001ec8:	7b7b      	ldrb	r3, [r7, #13]
 8001eca:	73fb      	strb	r3, [r7, #15]
	if( kbd_in != 0x70) {
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	2b70      	cmp	r3, #112	; 0x70
 8001ed0:	d014      	beq.n	8001efc <Scan_Row+0xa0>
		if( !(kbd_in & COL1) ) {
 8001ed2:	7b7b      	ldrb	r3, [r7, #13]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <Scan_Row+0x84>
			return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e010      	b.n	8001f02 <Scan_Row+0xa6>
		}
		if( !(kbd_in & COL2) ) {
 8001ee0:	7b7b      	ldrb	r3, [r7, #13]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <Scan_Row+0x92>
			return 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	e009      	b.n	8001f02 <Scan_Row+0xa6>
		}
		if( !(kbd_in & COL3) ) {
 8001eee:	7b7b      	ldrb	r3, [r7, #13]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <Scan_Row+0xa4>
			return 3;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e002      	b.n	8001f02 <Scan_Row+0xa6>
		}
	}
	else Nkey = 0x00;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]

	return Nkey;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	080066bc 	.word	0x080066bc
 8001f10:	080066d0 	.word	0x080066d0
 8001f14:	080066e4 	.word	0x080066e4

08001f18 <Scan_KB>:

#define ROWS_LENGTH 4
#define COLS_LENGTH 3

uint8_t Scan_KB() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	for(size_t row = 0; row < ROWS_LENGTH; row++) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	e018      	b.n	8001f56 <Scan_KB+0x3e>
		uint8_t key = Scan_Row(rows_config[row]);
 8001f24:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <Scan_KB+0x50>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff95 	bl	8001e5c <Scan_Row>
 8001f32:	4603      	mov	r3, r0
 8001f34:	70fb      	strb	r3, [r7, #3]
		if(key) {
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <Scan_KB+0x38>
			return row * COLS_LENGTH + key;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	0052      	lsls	r2, r2, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e006      	b.n	8001f5e <Scan_KB+0x46>
	for(size_t row = 0; row < ROWS_LENGTH; row++) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3301      	adds	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d9e3      	bls.n	8001f24 <Scan_KB+0xc>
		}
	}
	return 0;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000110 	.word	0x20000110

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0a4      	sub	sp, #144	; 0x90
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f72:	f000 fea1 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f76:	f000 f84f 	bl	8002018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7a:	f7ff fe73 	bl	8001c64 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001f7e:	f000 fdff 	bl	8002b80 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001f82:	f7ff feb3 	bl	8001cec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  oled_Init();
 8001f86:	f000 f8c5 	bl	8002114 <oled_Init>

  struct calculator_i calc = {
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <main+0x9c>)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4611      	mov	r1, r2
 8001f90:	228c      	movs	r2, #140	; 0x8c
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fa4a 	bl	800542c <memcpy>
  {
	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	oled_Reset();
 8001f98:	f000 fa86 	bl	80024a8 <oled_Reset>
	oled_WriteString(calc.layout == 1 ? "Calculator    2ndf" : "Calculator", Font_7x10, WHITE);
 8001f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <main+0x3c>
 8001fa4:	4819      	ldr	r0, [pc, #100]	; (800200c <main+0xa0>)
 8001fa6:	e000      	b.n	8001faa <main+0x3e>
 8001fa8:	4819      	ldr	r0, [pc, #100]	; (8002010 <main+0xa4>)
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <main+0xa8>)
 8001fac:	2301      	movs	r3, #1
 8001fae:	ca06      	ldmia	r2, {r1, r2}
 8001fb0:	f000 fa54 	bl	800245c <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <main+0xa8>)
 8001fb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fba:	f000 fa99 	bl	80024f0 <oled_NextLine>

	oled_WriteString(calc.buf, Font_7x10, WHITE);
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <main+0xa8>)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	f103 0008 	add.w	r0, r3, #8
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	ca06      	ldmia	r2, {r1, r2}
 8001fca:	f000 fa47 	bl	800245c <oled_WriteString>
	oled_UpdateScreen();
 8001fce:	f000 f92f 	bl	8002230 <oled_UpdateScreen>
	HAL_Delay(250);
 8001fd2:	20fa      	movs	r0, #250	; 0xfa
 8001fd4:	f000 fee2 	bl	8002d9c <HAL_Delay>

	uint8_t Key = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	while(!(Key)) {
 8001fde:	e004      	b.n	8001fea <main+0x7e>
	  Key = Scan_KB();
 8001fe0:	f7ff ff9a 	bl	8001f18 <Scan_KB>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	while(!(Key)) {
 8001fea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <main+0x74>
	}
	calc_Call_Action(&calc, Key-1);
 8001ff2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe00 	bl	8001c04 <calc_Call_Action>
  {
 8002004:	e7c8      	b.n	8001f98 <main+0x2c>
 8002006:	bf00      	nop
 8002008:	08006710 	.word	0x08006710
 800200c:	080066f0 	.word	0x080066f0
 8002010:	08006704 	.word	0x08006704
 8002014:	20000108 	.word	0x20000108

08002018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b094      	sub	sp, #80	; 0x50
 800201c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	2230      	movs	r2, #48	; 0x30
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fa0e 	bl	8005448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <SystemClock_Config+0xb8>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <SystemClock_Config+0xb8>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6413      	str	r3, [r2, #64]	; 0x40
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <SystemClock_Config+0xb8>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <SystemClock_Config+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <SystemClock_Config+0xbc>)
 8002066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <SystemClock_Config+0xbc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002080:	2310      	movs	r3, #16
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4618      	mov	r0, r3
 800208e:	f002 f975 	bl	800437c <HAL_RCC_OscConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002098:	f000 f81e 	bl	80020d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800209c:	230f      	movs	r3, #15
 800209e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 fbd8 	bl	800486c <HAL_RCC_ClockConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020c2:	f000 f809 	bl	80020d8 <Error_Handler>
  }
}
 80020c6:	bf00      	nop
 80020c8:	3750      	adds	r7, #80	; 0x50
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000

080020d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <Error_Handler+0x8>
	...

080020e4 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_State OLED;


static void oled_WriteCommand(uint8_t command) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 80020ee:	230a      	movs	r3, #10
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	2200      	movs	r2, #0
 80020fe:	2178      	movs	r1, #120	; 0x78
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <oled_WriteCommand+0x2c>)
 8002102:	f001 fa45 	bl	8003590 <HAL_I2C_Mem_Write>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000224 	.word	0x20000224

08002114 <oled_Init>:


uint8_t oled_Init(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8002118:	2064      	movs	r0, #100	; 0x64
 800211a:	f000 fe3f 	bl	8002d9c <HAL_Delay>

	oled_WriteCommand(0xAE);
 800211e:	20ae      	movs	r0, #174	; 0xae
 8002120:	f7ff ffe0 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8002124:	2020      	movs	r0, #32
 8002126:	f7ff ffdd 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 800212a:	2010      	movs	r0, #16
 800212c:	f7ff ffda 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 8002130:	20b0      	movs	r0, #176	; 0xb0
 8002132:	f7ff ffd7 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 8002136:	20c8      	movs	r0, #200	; 0xc8
 8002138:	f7ff ffd4 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff ffd1 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8002142:	2010      	movs	r0, #16
 8002144:	f7ff ffce 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8002148:	2040      	movs	r0, #64	; 0x40
 800214a:	f7ff ffcb 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 800214e:	2081      	movs	r0, #129	; 0x81
 8002150:	f7ff ffc8 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 8002154:	20ff      	movs	r0, #255	; 0xff
 8002156:	f7ff ffc5 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 800215a:	20a1      	movs	r0, #161	; 0xa1
 800215c:	f7ff ffc2 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 8002160:	20a6      	movs	r0, #166	; 0xa6
 8002162:	f7ff ffbf 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8002166:	20a8      	movs	r0, #168	; 0xa8
 8002168:	f7ff ffbc 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 800216c:	203f      	movs	r0, #63	; 0x3f
 800216e:	f7ff ffb9 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 8002172:	20a4      	movs	r0, #164	; 0xa4
 8002174:	f7ff ffb6 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8002178:	20d3      	movs	r0, #211	; 0xd3
 800217a:	f7ff ffb3 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff ffb0 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8002184:	20d5      	movs	r0, #213	; 0xd5
 8002186:	f7ff ffad 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 800218a:	20f0      	movs	r0, #240	; 0xf0
 800218c:	f7ff ffaa 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 8002190:	20d9      	movs	r0, #217	; 0xd9
 8002192:	f7ff ffa7 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8002196:	2022      	movs	r0, #34	; 0x22
 8002198:	f7ff ffa4 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 800219c:	20da      	movs	r0, #218	; 0xda
 800219e:	f7ff ffa1 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 80021a2:	2012      	movs	r0, #18
 80021a4:	f7ff ff9e 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 80021a8:	20db      	movs	r0, #219	; 0xdb
 80021aa:	f7ff ff9b 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80021ae:	2020      	movs	r0, #32
 80021b0:	f7ff ff98 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 80021b4:	208d      	movs	r0, #141	; 0x8d
 80021b6:	f7ff ff95 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 80021ba:	2014      	movs	r0, #20
 80021bc:	f7ff ff92 	bl	80020e4 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 80021c0:	20af      	movs	r0, #175	; 0xaf
 80021c2:	f7ff ff8f 	bl	80020e4 <oled_WriteCommand>

	oled_Fill(BLACK);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 f80e 	bl	80021e8 <oled_Fill>

	oled_UpdateScreen();
 80021cc:	f000 f830 	bl	8002230 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <oled_Init+0xd0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80021d6:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <oled_Init+0xd0>)
 80021d8:	2200      	movs	r2, #0
 80021da:	805a      	strh	r2, [r3, #2]


	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000678 	.word	0x20000678

080021e8 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i < sizeof(OLED_Buffer); i++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e00d      	b.n	8002214 <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == BLACK) ? 0x00 : 0xFF;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <oled_Fill+0x1a>
 80021fe:	2100      	movs	r1, #0
 8002200:	e000      	b.n	8002204 <oled_Fill+0x1c>
 8002202:	21ff      	movs	r1, #255	; 0xff
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <oled_Fill+0x44>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	460a      	mov	r2, r1
 800220c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < sizeof(OLED_Buffer); i++) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3301      	adds	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d3ed      	bcc.n	80021f8 <oled_Fill+0x10>
	}
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000278 	.word	0x20000278

08002230 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af04      	add	r7, sp, #16
	for (uint8_t i = 0; i < 8; i++) {
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e01d      	b.n	8002278 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	3b50      	subs	r3, #80	; 0x50
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff4e 	bl	80020e4 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff ff4b 	bl	80020e4 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff ff48 	bl	80020e4 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <oled_UpdateScreen+0x58>)
 800225a:	4413      	add	r3, r2
 800225c:	2264      	movs	r2, #100	; 0x64
 800225e:	9202      	str	r2, [sp, #8]
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	9201      	str	r2, [sp, #4]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2301      	movs	r3, #1
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	2178      	movs	r1, #120	; 0x78
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <oled_UpdateScreen+0x5c>)
 800226e:	f001 f98f 	bl	8003590 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < 8; i++) {
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	3301      	adds	r3, #1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b07      	cmp	r3, #7
 800227c:	d9de      	bls.n	800223c <oled_UpdateScreen+0xc>
	}
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000278 	.word	0x20000278
 800228c:	20000224 	.word	0x20000224

08002290 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
 800229a:	460b      	mov	r3, r1
 800229c:	71bb      	strb	r3, [r7, #6]
 800229e:	4613      	mov	r3, r2
 80022a0:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db3d      	blt.n	8002326 <oled_DrawPixel+0x96>
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	2b3f      	cmp	r3, #63	; 0x3f
 80022ae:	d83a      	bhi.n	8002326 <oled_DrawPixel+0x96>
		return;
	}

	if (color == WHITE) {
 80022b0:	797b      	ldrb	r3, [r7, #5]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d11a      	bne.n	80022ec <oled_DrawPixel+0x5c>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	79bb      	ldrb	r3, [r7, #6]
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	b2d8      	uxtb	r0, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	01db      	lsls	r3, r3, #7
 80022c2:	4413      	add	r3, r2
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <oled_DrawPixel+0xa4>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	b25a      	sxtb	r2, r3
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b259      	sxtb	r1, r3
 80022dc:	79fa      	ldrb	r2, [r7, #7]
 80022de:	4603      	mov	r3, r0
 80022e0:	01db      	lsls	r3, r3, #7
 80022e2:	4413      	add	r3, r2
 80022e4:	b2c9      	uxtb	r1, r1
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <oled_DrawPixel+0xa4>)
 80022e8:	54d1      	strb	r1, [r2, r3]
 80022ea:	e01d      	b.n	8002328 <oled_DrawPixel+0x98>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 80022ec:	79fa      	ldrb	r2, [r7, #7]
 80022ee:	79bb      	ldrb	r3, [r7, #6]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	b2d8      	uxtb	r0, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	01db      	lsls	r3, r3, #7
 80022f8:	4413      	add	r3, r2
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <oled_DrawPixel+0xa4>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	b25b      	sxtb	r3, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	b25b      	sxtb	r3, r3
 8002312:	4013      	ands	r3, r2
 8002314:	b259      	sxtb	r1, r3
 8002316:	79fa      	ldrb	r2, [r7, #7]
 8002318:	4603      	mov	r3, r0
 800231a:	01db      	lsls	r3, r3, #7
 800231c:	4413      	add	r3, r2
 800231e:	b2c9      	uxtb	r1, r1
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <oled_DrawPixel+0xa4>)
 8002322:	54d1      	strb	r1, [r2, r3]
 8002324:	e000      	b.n	8002328 <oled_DrawPixel+0x98>
		return;
 8002326:	bf00      	nop
	}
}
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000278 	.word	0x20000278

08002338 <oled_WriteChar>:

char oled_WriteChar(char ch, FontType Font, OLED_COLOR color) {
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	4604      	mov	r4, r0
 8002340:	1d38      	adds	r0, r7, #4
 8002342:	e880 0006 	stmia.w	r0, {r1, r2}
 8002346:	461a      	mov	r2, r3
 8002348:	4623      	mov	r3, r4
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	4613      	mov	r3, r2
 800234e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth)) {
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <oled_WriteChar+0x120>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	793b      	ldrb	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	2b7f      	cmp	r3, #127	; 0x7f
 800235c:	dd15      	ble.n	800238a <oled_WriteChar+0x52>
		if(OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight*2 + OLED_STRING_SPACE)) {
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <oled_WriteChar+0x120>)
 8002360:	885b      	ldrh	r3, [r3, #2]
 8002362:	461a      	mov	r2, r3
 8002364:	797b      	ldrb	r3, [r7, #5]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	2b3c      	cmp	r3, #60	; 0x3c
 800236c:	dd01      	ble.n	8002372 <oled_WriteChar+0x3a>
			return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e06e      	b.n	8002450 <oled_WriteChar+0x118>
		}
		oled_SetCursor(0, OLED.CurrentY + Font.FontHeight + OLED_STRING_SPACE);
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <oled_WriteChar+0x120>)
 8002374:	885b      	ldrh	r3, [r3, #2]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	797b      	ldrb	r3, [r7, #5]
 800237a:	4413      	add	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3303      	adds	r3, #3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	2000      	movs	r0, #0
 8002386:	f000 f89b 	bl	80024c0 <oled_SetCursor>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e04c      	b.n	800242a <oled_WriteChar+0xf2>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3b20      	subs	r3, #32
 8002396:	7979      	ldrb	r1, [r7, #5]
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4619      	mov	r1, r3
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	440b      	add	r3, r1
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e034      	b.n	800241a <oled_WriteChar+0xe2>
			if ((b << j) & 0x8000) {
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <oled_WriteChar+0xae>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <oled_WriteChar+0x120>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	b2d8      	uxtb	r0, r3
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <oled_WriteChar+0x120>)
 80023d0:	885b      	ldrh	r3, [r3, #2]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4413      	add	r3, r2
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	7bba      	ldrb	r2, [r7, #14]
 80023de:	4619      	mov	r1, r3
 80023e0:	f7ff ff56 	bl	8002290 <oled_DrawPixel>
 80023e4:	e016      	b.n	8002414 <oled_WriteChar+0xdc>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <oled_WriteChar+0x120>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	b2d8      	uxtb	r0, r3
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <oled_WriteChar+0x120>)
 80023f6:	885b      	ldrh	r3, [r3, #2]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4413      	add	r3, r2
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	7bbb      	ldrb	r3, [r7, #14]
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff ff3e 	bl	8002290 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	3301      	adds	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	793b      	ldrb	r3, [r7, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4293      	cmp	r3, r2
 8002422:	d3c5      	bcc.n	80023b0 <oled_WriteChar+0x78>
	for (i = 0; i < Font.FontHeight; i++) {
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3301      	adds	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	797b      	ldrb	r3, [r7, #5]
 800242c:	461a      	mov	r2, r3
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4293      	cmp	r3, r2
 8002432:	d3ad      	bcc.n	8002390 <oled_WriteChar+0x58>
			}
		}
	}

	oled_SetCursor(OLED.CurrentX + Font.FontWidth, OLED.CurrentY);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <oled_WriteChar+0x120>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	793b      	ldrb	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <oled_WriteChar+0x120>)
 8002442:	8852      	ldrh	r2, [r2, #2]
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f839 	bl	80024c0 <oled_SetCursor>

	return ch;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	20000678 	.word	0x20000678

0800245c <oled_WriteString>:


char oled_WriteString(char* str, FontType Font, OLED_COLOR color) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	1d38      	adds	r0, r7, #4
 8002466:	e880 0006 	stmia.w	r0, {r1, r2}
 800246a:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 800246c:	e012      	b.n	8002494 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	7818      	ldrb	r0, [r3, #0]
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	1d3a      	adds	r2, r7, #4
 8002476:	ca06      	ldmia	r2, {r1, r2}
 8002478:	f7ff ff5e 	bl	8002338 <oled_WriteChar>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d002      	beq.n	800248e <oled_WriteString+0x32>
			return *str;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	e008      	b.n	80024a0 <oled_WriteString+0x44>
		}
		str++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3301      	adds	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e8      	bne.n	800246e <oled_WriteString+0x12>
	}
	return *str;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781b      	ldrb	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <oled_Reset>:

void oled_Reset() {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	oled_Fill(BLACK);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7ff fe9b 	bl	80021e8 <oled_Fill>
	oled_SetCursor(0,0);
 80024b2:	2100      	movs	r1, #0
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f803 	bl	80024c0 <oled_SetCursor>
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	460a      	mov	r2, r1
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <oled_SetCursor+0x2c>)
 80024d6:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <oled_SetCursor+0x2c>)
 80024de:	805a      	strh	r2, [r3, #2]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	20000678 	.word	0x20000678

080024f0 <oled_NextLine>:

void oled_NextLine(FontType Font) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	463b      	mov	r3, r7
 80024f8:	e883 0003 	stmia.w	r3, {r0, r1}
	if(OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight*2 + OLED_STRING_SPACE)) {
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <oled_NextLine+0x40>)
 80024fe:	885b      	ldrh	r3, [r3, #2]
 8002500:	461a      	mov	r2, r3
 8002502:	787b      	ldrb	r3, [r7, #1]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	2b3c      	cmp	r3, #60	; 0x3c
 800250a:	dc0c      	bgt.n	8002526 <oled_NextLine+0x36>
		return;
	}
	oled_SetCursor(0, OLED.CurrentY + Font.FontHeight + OLED_STRING_SPACE);
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <oled_NextLine+0x40>)
 800250e:	885b      	ldrh	r3, [r3, #2]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	787b      	ldrb	r3, [r7, #1]
 8002514:	4413      	add	r3, r2
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3303      	adds	r3, #3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff ffce 	bl	80024c0 <oled_SetCursor>
 8002524:	e000      	b.n	8002528 <oled_NextLine+0x38>
		return;
 8002526:	bf00      	nop
}
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000678 	.word	0x20000678

08002534 <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs reg, uint8_t* buf) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af04      	add	r7, sp, #16
 800253a:	4603      	mov	r3, r0
 800253c:	603a      	str	r2, [r7, #0]
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	460b      	mov	r3, r1
 8002542:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b299      	uxth	r1, r3
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	b29a      	uxth	r2, r3
 8002550:	2364      	movs	r3, #100	; 0x64
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	2301      	movs	r3, #1
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2301      	movs	r3, #1
 800255e:	4804      	ldr	r0, [pc, #16]	; (8002570 <PCA9538_Read_Register+0x3c>)
 8002560:	f001 f910 	bl	8003784 <HAL_I2C_Mem_Read>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000224 	.word	0x20000224

08002574 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs reg, uint8_t* buf) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af04      	add	r7, sp, #16
 800257a:	4603      	mov	r3, r0
 800257c:	603a      	str	r2, [r7, #0]
 800257e:	80fb      	strh	r3, [r7, #6]
 8002580:	460b      	mov	r3, r1
 8002582:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	b299      	uxth	r1, r3
 800258c:	797b      	ldrb	r3, [r7, #5]
 800258e:	b29a      	uxth	r2, r3
 8002590:	2364      	movs	r3, #100	; 0x64
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	2301      	movs	r3, #1
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	4804      	ldr	r0, [pc, #16]	; (80025b0 <PCA9538_Write_Register+0x3c>)
 80025a0:	f000 fff6 	bl	8003590 <HAL_I2C_Mem_Write>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000224 	.word	0x20000224

080025b4 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ffb4 	bl	8002534 <PCA9538_Read_Register>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7fd fe05 	bl	80001f0 <strlen>
 80025e6:	4603      	mov	r3, r0
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4803      	ldr	r0, [pc, #12]	; (8002600 <UART_Transmit+0x28>)
 80025f2:	f002 fb68 	bl	8004cc6 <HAL_UART_Transmit>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000680 	.word	0x20000680

08002604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_MspInit+0x4c>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_MspInit+0x4c>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 fb5c 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00a      	b.n	80026d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ba:	f3af 8000 	nop.w
 80026be:	4601      	mov	r1, r0
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	b2ca      	uxtb	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf0      	blt.n	80026ba <_read+0x12>
  }

  return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e009      	b.n	8002708 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	60ba      	str	r2, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	dbf1      	blt.n	80026f4 <_write+0x12>
  }
  return len;
 8002710:	687b      	ldr	r3, [r7, #4]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_close>:

int _close(int file)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002742:	605a      	str	r2, [r3, #4]
  return 0;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_isatty>:

int _isatty(int file)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f002 fdfc 	bl	80053b0 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20030000 	.word	0x20030000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	2000067c 	.word	0x2000067c
 80027ec:	200006d8 	.word	0x200006d8

080027f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <SystemInit+0x20>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <SystemInit+0x20>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <ring_token_create>:
#include <string.h>

#include "ring.h"
#include "tokenizer.h"

DEFINE_RING(token, struct token)
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	463c      	mov	r4, r7
 800281c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002820:	2018      	movs	r0, #24
 8002822:	f002 fdf3 	bl	800540c <malloc>
 8002826:	4603      	mov	r3, r0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <ring_token_create+0x20>
 8002830:	2300      	movs	r3, #0
 8002832:	e00c      	b.n	800284e <ring_token_create+0x3a>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	461c      	mov	r4, r3
 8002838:	463b      	mov	r3, r7
 800283a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	615a      	str	r2, [r3, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd90      	pop	{r4, r7, pc}

08002856 <ring_token_push>:
 8002856:	b082      	sub	sp, #8
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	f107 0118 	add.w	r1, r7, #24
 8002864:	e881 000c 	stmia.w	r1, {r2, r3}
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800286e:	f7ff ffd1 	bl	8002814 <ring_token_create>
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <ring_token_push+0x28>
 800287a:	2300      	movs	r3, #0
 800287c:	e01b      	b.n	80028b6 <ring_token_push+0x60>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <ring_token_push+0x3a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	e012      	b.n	80028b6 <ring_token_push+0x60>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	611a      	str	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	611a      	str	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028c0:	b002      	add	sp, #8
 80028c2:	4770      	bx	lr

080028c4 <ring_token_free>:
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <ring_token_free+0x3c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	e00a      	b.n	80028f6 <ring_token_free+0x32>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f002 fd93 	bl	800541c <free>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <ring_token_free+0x1c>
 80028fe:	e000      	b.n	8002902 <ring_token_free+0x3e>
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <skip_separators>:

        [TOK_END]   = "END",
        [TOK_ERROR] = "ERROR"
};

char *skip_separators(char *str) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    while (*str != '\0' && strchr(SEPARATORS, *str) != NULL)
 8002910:	e002      	b.n	8002918 <skip_separators+0x10>
        str++;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3301      	adds	r3, #1
 8002916:	607b      	str	r3, [r7, #4]
    while (*str != '\0' && strchr(SEPARATORS, *str) != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <skip_separators+0x2e>
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <skip_separators+0x38>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f003 fa00 	bl	8005d30 <strchr>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ed      	bne.n	8002912 <skip_separators+0xa>
    return str;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000118 	.word	0x20000118

08002944 <next_token>:

struct token next_token(char **str) {
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b099      	sub	sp, #100	; 0x64
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
    int i;
    char *buf = skip_separators(*str);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ffd8 	bl	8002908 <skip_separators>
 8002958:	65b8      	str	r0, [r7, #88]	; 0x58

    if (*buf == '\0') {
 800295a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <next_token+0x34>
        return (struct token) {TOK_END, 0};
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	220f      	movs	r2, #15
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9c1 2302 	strd	r2, r3, [r1, #8]
        *str = str_end;
        return (struct token) {TOK_LIT, tmp};
    }

    return (struct token) {TOK_ERROR, 0};
}
 8002976:	e05e      	b.n	8002a36 <next_token+0xf2>
    for (i = 0; i < NUM_TOKENS; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800297c:	e02e      	b.n	80029dc <next_token+0x98>
        if (strncmp(buf, TOKENS[i], strlen(TOKENS[i])) == 0) {
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <next_token+0xfc>)
 8002980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002982:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002986:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <next_token+0xfc>)
 8002988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fc2e 	bl	80001f0 <strlen>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4621      	mov	r1, r4
 800299a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800299c:	f003 f9d5 	bl	8005d4a <strncmp>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d117      	bne.n	80029d6 <next_token+0x92>
            *str = buf + strlen(TOKENS[i]);
 80029a6:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <next_token+0xfc>)
 80029a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fc1e 	bl	80001f0 <strlen>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b8:	441a      	add	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	601a      	str	r2, [r3, #0]
            return (struct token) {i, 0};
 80029be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80029d4:	e02f      	b.n	8002a36 <next_token+0xf2>
    for (i = 0; i < NUM_TOKENS; i++)
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	3301      	adds	r3, #1
 80029da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029dc:	220d      	movs	r2, #13
 80029de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e0:	4293      	cmp	r3, r2
 80029e2:	dbcc      	blt.n	800297e <next_token+0x3a>
    if (isdigit(*buf)) {
 80029e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <next_token+0x100>)
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d014      	beq.n	8002a22 <next_token+0xde>
        int64_t tmp = strtoll(buf, &str_end, 10);
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	220a      	movs	r2, #10
 80029fe:	4619      	mov	r1, r3
 8002a00:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a02:	f003 fa4d 	bl	8005ea0 <strtoll>
 8002a06:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
        *str = str_end;
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	601a      	str	r2, [r3, #0]
        return (struct token) {TOK_LIT, tmp};
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	220d      	movs	r2, #13
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002a20:	e009      	b.n	8002a36 <next_token+0xf2>
    return (struct token) {TOK_ERROR, 0};
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2210      	movs	r2, #16
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	3764      	adds	r7, #100	; 0x64
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000011c 	.word	0x2000011c
 8002a44:	08006fec 	.word	0x08006fec

08002a48 <is_binop>:

bool is_binop(struct token token) {
 8002a48:	b490      	push	{r4, r7}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	463c      	mov	r4, r7
 8002a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return token.type == TOK_PLUS || token.type == TOK_MINUS ||
 8002a54:	783b      	ldrb	r3, [r7, #0]
           token.type == TOK_MUL || token.type == TOK_DIV || token.type == TOK_MOD || token.type == TOK_AND || token.type == TOK_OR || token.type == TOK_IMPL || token.type == TOK_BIC;
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d017      	beq.n	8002a8a <is_binop+0x42>
    return token.type == TOK_PLUS || token.type == TOK_MINUS ||
 8002a5a:	783b      	ldrb	r3, [r7, #0]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d014      	beq.n	8002a8a <is_binop+0x42>
           token.type == TOK_MUL || token.type == TOK_DIV || token.type == TOK_MOD || token.type == TOK_AND || token.type == TOK_OR || token.type == TOK_IMPL || token.type == TOK_BIC;
 8002a60:	783b      	ldrb	r3, [r7, #0]
    return token.type == TOK_PLUS || token.type == TOK_MINUS ||
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d011      	beq.n	8002a8a <is_binop+0x42>
           token.type == TOK_MUL || token.type == TOK_DIV || token.type == TOK_MOD || token.type == TOK_AND || token.type == TOK_OR || token.type == TOK_IMPL || token.type == TOK_BIC;
 8002a66:	783b      	ldrb	r3, [r7, #0]
 8002a68:	2b07      	cmp	r3, #7
 8002a6a:	d00e      	beq.n	8002a8a <is_binop+0x42>
 8002a6c:	783b      	ldrb	r3, [r7, #0]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d00b      	beq.n	8002a8a <is_binop+0x42>
 8002a72:	783b      	ldrb	r3, [r7, #0]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d008      	beq.n	8002a8a <is_binop+0x42>
 8002a78:	783b      	ldrb	r3, [r7, #0]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d005      	beq.n	8002a8a <is_binop+0x42>
 8002a7e:	783b      	ldrb	r3, [r7, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d002      	beq.n	8002a8a <is_binop+0x42>
 8002a84:	783b      	ldrb	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <is_binop+0x46>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <is_binop+0x48>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc90      	pop	{r4, r7}
 8002a9e:	4770      	bx	lr

08002aa0 <is_unop>:

bool is_unop(struct token token) {
 8002aa0:	b490      	push	{r4, r7}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	463c      	mov	r4, r7
 8002aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return token.type == TOK_NEG || token.type == TOK_FACT || token.type == TOK_NEGL;
 8002aac:	783b      	ldrb	r3, [r7, #0]
 8002aae:	2b0e      	cmp	r3, #14
 8002ab0:	d005      	beq.n	8002abe <is_unop+0x1e>
 8002ab2:	783b      	ldrb	r3, [r7, #0]
 8002ab4:	2b0a      	cmp	r3, #10
 8002ab6:	d002      	beq.n	8002abe <is_unop+0x1e>
 8002ab8:	783b      	ldrb	r3, [r7, #0]
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	d101      	bne.n	8002ac2 <is_unop+0x22>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <is_unop+0x24>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc90      	pop	{r4, r7}
 8002ad2:	4770      	bx	lr

08002ad4 <tokenize>:

struct ring_token *tokenize(char *str) {
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b08f      	sub	sp, #60	; 0x3c
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	6078      	str	r0, [r7, #4]
    struct token token, prev = {TOK_ERROR, 0};
 8002adc:	2310      	movs	r3, #16
 8002ade:	743b      	strb	r3, [r7, #16]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    struct ring_token *tokens = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
    while ((token = next_token(&str)).type != TOK_END) {
 8002af0:	e035      	b.n	8002b5e <tokenize+0x8a>
        if (token.type == TOK_ERROR) {
 8002af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d106      	bne.n	8002b08 <tokenize+0x34>
            ring_token_free(&tokens);
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fee0 	bl	80028c4 <ring_token_free>
            return NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e036      	b.n	8002b76 <tokenize+0xa2>
        }
        if (token.type == TOK_MINUS &&
 8002b08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d110      	bne.n	8002b32 <tokenize+0x5e>
            (tokens == NULL || prev.type == TOK_OPEN || is_binop(prev)))
 8002b10:	68fb      	ldr	r3, [r7, #12]
        if (token.type == TOK_MINUS &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <tokenize+0x58>
            (tokens == NULL || prev.type == TOK_OPEN || is_binop(prev)))
 8002b16:	7c3b      	ldrb	r3, [r7, #16]
 8002b18:	2b0b      	cmp	r3, #11
 8002b1a:	d007      	beq.n	8002b2c <tokenize+0x58>
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b22:	f7ff ff91 	bl	8002a48 <is_binop>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <tokenize+0x5e>
            token.type = TOK_NEG;
 8002b2c:	230e      	movs	r3, #14
 8002b2e:	f887 3020 	strb.w	r3, [r7, #32]
        ring_token_push(&tokens, token);
 8002b32:	f107 040c 	add.w	r4, r7, #12
 8002b36:	466a      	mov	r2, sp
 8002b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b40:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	cb0c      	ldmia	r3, {r2, r3}
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f7ff fe83 	bl	8002856 <ring_token_push>
        prev = token;
 8002b50:	f107 0410 	add.w	r4, r7, #16
 8002b54:	f107 0320 	add.w	r3, r7, #32
 8002b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while ((token = next_token(&str)).type != TOK_END) {
 8002b5e:	f107 0320 	add.w	r3, r7, #32
 8002b62:	1d3a      	adds	r2, r7, #4
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff feec 	bl	8002944 <next_token>
 8002b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b70:	2b0f      	cmp	r3, #15
 8002b72:	d1be      	bne.n	8002af2 <tokenize+0x1e>
    }

    return tokens;
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3734      	adds	r7, #52	; 0x34
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd90      	pop	{r4, r7, pc}
	...

08002b80 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <MX_USART6_UART_Init+0x50>)
 8002b88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bb6:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_USART6_UART_Init+0x4c>)
 8002bb8:	f002 f838 	bl	8004c2c <HAL_UART_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002bc2:	f7ff fa89 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000680 	.word	0x20000680
 8002bd0:	40011400 	.word	0x40011400

08002bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_UART_MspInit+0x84>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d12b      	bne.n	8002c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_UART_MspInit+0x88>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_UART_MspInit+0x88>)
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_UART_MspInit+0x88>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_UART_MspInit+0x88>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_UART_MspInit+0x88>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_UART_MspInit+0x88>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c2e:	23c0      	movs	r3, #192	; 0xc0
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	4619      	mov	r1, r3
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <HAL_UART_MspInit+0x8c>)
 8002c4a:	f000 f9b1 	bl	8002fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3728      	adds	r7, #40	; 0x28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40011400 	.word	0x40011400
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020800 	.word	0x40020800

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c70:	e002      	b.n	8002c78 <LoopCopyDataInit>

08002c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c76:	3304      	adds	r3, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c7c:	d3f9      	bcc.n	8002c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c80:	4c0b      	ldr	r4, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c84:	e001      	b.n	8002c8a <LoopFillZerobss>

08002c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c88:	3204      	adds	r2, #4

08002c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c8c:	d3fb      	bcc.n	8002c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c8e:	f7ff fdaf 	bl	80027f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f002 fb93 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c96:	f7ff f969 	bl	8001f6c <main>
  bx  lr    
 8002c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002ca8:	08007198 	.word	0x08007198
  ldr r2, =_sbss
 8002cac:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002cb0:	200006d8 	.word	0x200006d8

08002cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_Init+0x40>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_Init+0x40>)
 8002cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x40>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f931 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fc8a 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f93b 	bl	8002f96 <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f911 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000114 	.word	0x20000114
 8002d54:	200001a0 	.word	0x200001a0
 8002d58:	2000019c 	.word	0x2000019c

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200001a0 	.word	0x200001a0
 8002d80:	200006c4 	.word	0x200006c4

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	200006c4 	.word	0x200006c4

08002d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d005      	beq.n	8002dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_Delay+0x44>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc2:	bf00      	nop
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d8f7      	bhi.n	8002dc4 <HAL_Delay+0x28>
  {
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200001a0 	.word	0x200001a0

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff47 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff5c 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff8e 	bl	8002e9c <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffb0 	bl	8002f04 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e177      	b.n	80032bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	f040 8166 	bne.w	80032b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d005      	beq.n	8003002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d130      	bne.n	8003064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 0201 	and.w	r2, r3, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b03      	cmp	r3, #3
 800306e:	d017      	beq.n	80030a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d123      	bne.n	80030f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80c0 	beq.w	80032b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b66      	ldr	r3, [pc, #408]	; (80032d4 <HAL_GPIO_Init+0x324>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a65      	ldr	r2, [pc, #404]	; (80032d4 <HAL_GPIO_Init+0x324>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_GPIO_Init+0x324>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003152:	4a61      	ldr	r2, [pc, #388]	; (80032d8 <HAL_GPIO_Init+0x328>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	220f      	movs	r2, #15
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a58      	ldr	r2, [pc, #352]	; (80032dc <HAL_GPIO_Init+0x32c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d037      	beq.n	80031ee <HAL_GPIO_Init+0x23e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_GPIO_Init+0x330>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d031      	beq.n	80031ea <HAL_GPIO_Init+0x23a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_GPIO_Init+0x334>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02b      	beq.n	80031e6 <HAL_GPIO_Init+0x236>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a55      	ldr	r2, [pc, #340]	; (80032e8 <HAL_GPIO_Init+0x338>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d025      	beq.n	80031e2 <HAL_GPIO_Init+0x232>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a54      	ldr	r2, [pc, #336]	; (80032ec <HAL_GPIO_Init+0x33c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01f      	beq.n	80031de <HAL_GPIO_Init+0x22e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a53      	ldr	r2, [pc, #332]	; (80032f0 <HAL_GPIO_Init+0x340>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d019      	beq.n	80031da <HAL_GPIO_Init+0x22a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_GPIO_Init+0x344>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_GPIO_Init+0x226>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a51      	ldr	r2, [pc, #324]	; (80032f8 <HAL_GPIO_Init+0x348>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00d      	beq.n	80031d2 <HAL_GPIO_Init+0x222>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a50      	ldr	r2, [pc, #320]	; (80032fc <HAL_GPIO_Init+0x34c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <HAL_GPIO_Init+0x21e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4f      	ldr	r2, [pc, #316]	; (8003300 <HAL_GPIO_Init+0x350>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_GPIO_Init+0x21a>
 80031c6:	2309      	movs	r3, #9
 80031c8:	e012      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031ca:	230a      	movs	r3, #10
 80031cc:	e010      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e00e      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031d2:	2307      	movs	r3, #7
 80031d4:	e00c      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031d6:	2306      	movs	r3, #6
 80031d8:	e00a      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031da:	2305      	movs	r3, #5
 80031dc:	e008      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031de:	2304      	movs	r3, #4
 80031e0:	e006      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e004      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e002      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x240>
 80031ee:	2300      	movs	r3, #0
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f002 0203 	and.w	r2, r2, #3
 80031f6:	0092      	lsls	r2, r2, #2
 80031f8:	4093      	lsls	r3, r2
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003200:	4935      	ldr	r1, [pc, #212]	; (80032d8 <HAL_GPIO_Init+0x328>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_GPIO_Init+0x354>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003232:	4a34      	ldr	r2, [pc, #208]	; (8003304 <HAL_GPIO_Init+0x354>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_GPIO_Init+0x354>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800325c:	4a29      	ldr	r2, [pc, #164]	; (8003304 <HAL_GPIO_Init+0x354>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_GPIO_Init+0x354>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_GPIO_Init+0x354>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_GPIO_Init+0x354>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_GPIO_Init+0x354>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	f67f ae84 	bls.w	8002fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40020800 	.word	0x40020800
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40021400 	.word	0x40021400
 80032f4:	40021800 	.word	0x40021800
 80032f8:	40021c00 	.word	0x40021c00
 80032fc:	40022000 	.word	0x40022000
 8003300:	40022400 	.word	0x40022400
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e12b      	b.n	8003572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fd1c 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800336c:	f001 fc36 	bl	8004bdc <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a81      	ldr	r2, [pc, #516]	; (800357c <HAL_I2C_Init+0x274>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d807      	bhi.n	800338c <HAL_I2C_Init+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_I2C_Init+0x278>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e006      	b.n	800339a <HAL_I2C_Init+0x92>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_I2C_Init+0x27c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0e7      	b.n	8003572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a78      	ldr	r2, [pc, #480]	; (8003588 <HAL_I2C_Init+0x280>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_I2C_Init+0x274>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d802      	bhi.n	80033dc <HAL_I2C_Init+0xd4>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	e009      	b.n	80033f0 <HAL_I2C_Init+0xe8>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	4a69      	ldr	r2, [pc, #420]	; (800358c <HAL_I2C_Init+0x284>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	3301      	adds	r3, #1
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	495c      	ldr	r1, [pc, #368]	; (800357c <HAL_I2C_Init+0x274>)
 800340c:	428b      	cmp	r3, r1
 800340e:	d819      	bhi.n	8003444 <HAL_I2C_Init+0x13c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e59      	subs	r1, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fbb1 f3f3 	udiv	r3, r1, r3
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003424:	400b      	ands	r3, r1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_I2C_Init+0x138>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e59      	subs	r1, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fbb1 f3f3 	udiv	r3, r1, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	e051      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003440:	2304      	movs	r3, #4
 8003442:	e04f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_I2C_Init+0x168>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e012      	b.n	8003496 <HAL_I2C_Init+0x18e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x196>
 800349a:	2301      	movs	r3, #1
 800349c:	e022      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10e      	bne.n	80034c4 <HAL_I2C_Init+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e58      	subs	r0, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6809      	ldr	r1, [r1, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6911      	ldr	r1, [r2, #16]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	000186a0 	.word	0x000186a0
 8003580:	001e847f 	.word	0x001e847f
 8003584:	003d08ff 	.word	0x003d08ff
 8003588:	431bde83 	.word	0x431bde83
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035aa:	f7ff fbeb 	bl	8002d84 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	f040 80d9 	bne.w	8003770 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2319      	movs	r3, #25
 80035c4:	2201      	movs	r2, #1
 80035c6:	496d      	ldr	r1, [pc, #436]	; (800377c <HAL_I2C_Mem_Write+0x1ec>)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc7f 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0cc      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Mem_Write+0x56>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0c5      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d007      	beq.n	800360c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2221      	movs	r2, #33	; 0x21
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a4d      	ldr	r2, [pc, #308]	; (8003780 <HAL_I2C_Mem_Write+0x1f0>)
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800364e:	88f8      	ldrh	r0, [r7, #6]
 8003650:	893a      	ldrh	r2, [r7, #8]
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4603      	mov	r3, r0
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fab6 	bl	8003bd0 <I2C_RequestMemoryWrite>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d052      	beq.n	8003710 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e081      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fd00 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b04      	cmp	r3, #4
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06b      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d11b      	bne.n	8003710 <HAL_I2C_Mem_Write+0x180>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1aa      	bne.n	800366e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fcec 	bl	80040fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e016      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	00100002 	.word	0x00100002
 8003780:	ffff0000 	.word	0xffff0000

08003784 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	; 0x30
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	460b      	mov	r3, r1
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800379e:	f7ff faf1 	bl	8002d84 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	f040 8208 	bne.w	8003bc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2319      	movs	r3, #25
 80037b8:	2201      	movs	r2, #1
 80037ba:	497b      	ldr	r1, [pc, #492]	; (80039a8 <HAL_I2C_Mem_Read+0x224>)
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fb85 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	e1fb      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Mem_Read+0x56>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e1f4      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d007      	beq.n	8003800 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2222      	movs	r2, #34	; 0x22
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a5b      	ldr	r2, [pc, #364]	; (80039ac <HAL_I2C_Mem_Read+0x228>)
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003842:	88f8      	ldrh	r0, [r7, #6]
 8003844:	893a      	ldrh	r2, [r7, #8]
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4603      	mov	r3, r0
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa52 	bl	8003cfc <I2C_RequestMemoryRead>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1b0      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d113      	bne.n	8003892 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	623b      	str	r3, [r7, #32]
 800387e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e184      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b01      	cmp	r3, #1
 8003898:	d11b      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e164      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d11b      	bne.n	8003912 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	e144      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003928:	e138      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	2b03      	cmp	r3, #3
 8003930:	f200 80f1 	bhi.w	8003b16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b01      	cmp	r3, #1
 800393a:	d123      	bne.n	8003984 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fc1b 	bl	800417c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e139      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003982:	e10b      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b02      	cmp	r3, #2
 800398a:	d14e      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	2200      	movs	r2, #0
 8003994:	4906      	ldr	r1, [pc, #24]	; (80039b0 <HAL_I2C_Mem_Read+0x22c>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa98 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e10e      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
 80039a6:	bf00      	nop
 80039a8:	00100002 	.word	0x00100002
 80039ac:	ffff0000 	.word	0xffff0000
 80039b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a28:	e0b8      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	2200      	movs	r2, #0
 8003a32:	4966      	ldr	r1, [pc, #408]	; (8003bcc <HAL_I2C_Mem_Read+0x448>)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fa49 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0bf      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	494f      	ldr	r1, [pc, #316]	; (8003bcc <HAL_I2C_Mem_Read+0x448>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fa1b 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e091      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b14:	e042      	b.n	8003b9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb2e 	bl	800417c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e04c      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d118      	bne.n	8003b9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f aec2 	bne.w	800392a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	00010004 	.word	0x00010004

08003bd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	817b      	strh	r3, [r7, #10]
 8003be2:	460b      	mov	r3, r1
 8003be4:	813b      	strh	r3, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f960 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c20:	d103      	bne.n	8003c2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e05f      	b.n	8003cee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	492d      	ldr	r1, [pc, #180]	; (8003cf8 <I2C_RequestMemoryWrite+0x128>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f998 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e04c      	b.n	8003cee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	6a39      	ldr	r1, [r7, #32]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fa02 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d107      	bne.n	8003c92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e02b      	b.n	8003cee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c9c:	893b      	ldrh	r3, [r7, #8]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	e021      	b.n	8003cec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	6a39      	ldr	r1, [r7, #32]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f9dc 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d107      	bne.n	8003cde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e005      	b.n	8003cee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	00010002 	.word	0x00010002

08003cfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	817b      	strh	r3, [r7, #10]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	813b      	strh	r3, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f8c2 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5c:	d103      	bne.n	8003d66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0aa      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6a:	897b      	ldrh	r3, [r7, #10]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	4952      	ldr	r1, [pc, #328]	; (8003ec8 <I2C_RequestMemoryRead+0x1cc>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f8fa 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e097      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f964 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d107      	bne.n	8003dce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e076      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e021      	b.n	8003e28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f93e 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e050      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1e:	893b      	ldrh	r3, [r7, #8]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	6a39      	ldr	r1, [r7, #32]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f923 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d107      	bne.n	8003e50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e035      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f82b 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d103      	bne.n	8003e94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e013      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	6a3a      	ldr	r2, [r7, #32]
 8003eac:	4906      	ldr	r1, [pc, #24]	; (8003ec8 <I2C_RequestMemoryRead+0x1cc>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f863 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	00010002 	.word	0x00010002

08003ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003edc:	e025      	b.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d021      	beq.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fe ff4d 	bl	8002d84 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e023      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10d      	bne.n	8003f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	e00c      	b.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d0b6      	beq.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f88:	e051      	b.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d123      	bne.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e046      	b.n	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d021      	beq.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fe fecb 	bl	8002d84 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d116      	bne.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e020      	b.n	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10c      	bne.n	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e00b      	b.n	800406a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d18d      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004084:	e02d      	b.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f8ce 	bl	8004228 <I2C_IsAcknowledgeFailed>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e02d      	b.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d021      	beq.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409e:	f7fe fe71 	bl	8002d84 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d302      	bcc.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d116      	bne.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e007      	b.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d1ca      	bne.n	8004086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004106:	e02d      	b.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f88d 	bl	8004228 <I2C_IsAcknowledgeFailed>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02d      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d021      	beq.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7fe fe30 	bl	8002d84 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d1ca      	bne.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004188:	e042      	b.n	8004210 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d119      	bne.n	80041cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e029      	b.n	8004220 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fe fdda 	bl	8002d84 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d116      	bne.n	8004210 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e007      	b.n	8004220 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d1b5      	bne.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423e:	d11b      	bne.n	8004278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	d129      	bne.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0210 	bic.w	r2, r2, #16
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d12a      	bne.n	800436e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2224      	movs	r2, #36	; 0x24
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004338:	89fb      	ldrh	r3, [r7, #14]
 800433a:	f023 030f 	bic.w	r3, r3, #15
 800433e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	89fb      	ldrh	r3, [r7, #14]
 8004346:	4313      	orrs	r3, r2
 8004348:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	89fa      	ldrh	r2, [r7, #14]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e267      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d075      	beq.n	8004486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439a:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00c      	beq.n	80043c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d112      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b2:	4b82      	ldr	r3, [pc, #520]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043be:	d10b      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	4b7e      	ldr	r3, [pc, #504]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d05b      	beq.n	8004484 <HAL_RCC_OscConfig+0x108>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d157      	bne.n	8004484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e242      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d106      	bne.n	80043f0 <HAL_RCC_OscConfig+0x74>
 80043e2:	4b76      	ldr	r3, [pc, #472]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a75      	ldr	r2, [pc, #468]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xb0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x98>
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6f      	ldr	r2, [pc, #444]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6c      	ldr	r2, [pc, #432]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xb0>
 8004414:	4b69      	ldr	r3, [pc, #420]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a68      	ldr	r2, [pc, #416]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b66      	ldr	r3, [pc, #408]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a65      	ldr	r2, [pc, #404]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe fca6 	bl	8002d84 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443c:	f7fe fca2 	bl	8002d84 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e207      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xc0>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe fc92 	bl	8002d84 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7fe fc8e 	bl	8002d84 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e1f3      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	4b51      	ldr	r3, [pc, #324]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0xe8>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d063      	beq.n	800455a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004492:	4b4a      	ldr	r3, [pc, #296]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b47      	ldr	r3, [pc, #284]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d11c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b44      	ldr	r3, [pc, #272]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	4b41      	ldr	r3, [pc, #260]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCC_OscConfig+0x152>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1c7      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4937      	ldr	r1, [pc, #220]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	e03a      	b.n	800455a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ec:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_RCC_OscConfig+0x244>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe fc47 	bl	8002d84 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fa:	f7fe fc43 	bl	8002d84 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e1a8      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4925      	ldr	r1, [pc, #148]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
 800452c:	e015      	b.n	800455a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_OscConfig+0x244>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fc26 	bl	8002d84 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453c:	f7fe fc22 	bl	8002d84 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e187      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d036      	beq.n	80045d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <HAL_RCC_OscConfig+0x248>)
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fe fc06 	bl	8002d84 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457c:	f7fe fc02 	bl	8002d84 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e167      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_OscConfig+0x240>)
 8004590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x200>
 800459a:	e01b      	b.n	80045d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_OscConfig+0x248>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fe fbef 	bl	8002d84 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	e00e      	b.n	80045c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045aa:	f7fe fbeb 	bl	8002d84 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d907      	bls.n	80045c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e150      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	42470000 	.word	0x42470000
 80045c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	4b88      	ldr	r3, [pc, #544]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ea      	bne.n	80045aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8097 	beq.w	8004710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	4b81      	ldr	r3, [pc, #516]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	4a7c      	ldr	r2, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	; 0x40
 8004602:	4b7a      	ldr	r3, [pc, #488]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b77      	ldr	r3, [pc, #476]	; (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d118      	bne.n	8004650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461e:	4b74      	ldr	r3, [pc, #464]	; (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a73      	ldr	r2, [pc, #460]	; (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7fe fbab 	bl	8002d84 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7fe fba7 	bl	8002d84 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e10c      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b6a      	ldr	r3, [pc, #424]	; (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x2ea>
 8004658:	4b64      	ldr	r3, [pc, #400]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a63      	ldr	r2, [pc, #396]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	e01c      	b.n	80046a0 <HAL_RCC_OscConfig+0x324>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x30c>
 800466e:	4b5f      	ldr	r3, [pc, #380]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a5e      	ldr	r2, [pc, #376]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	6713      	str	r3, [r2, #112]	; 0x70
 800467a:	4b5c      	ldr	r3, [pc, #368]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a5b      	ldr	r2, [pc, #364]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6713      	str	r3, [r2, #112]	; 0x70
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0x324>
 8004688:	4b58      	ldr	r3, [pc, #352]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a57      	ldr	r2, [pc, #348]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
 8004694:	4b55      	ldr	r3, [pc, #340]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a54      	ldr	r2, [pc, #336]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800469a:	f023 0304 	bic.w	r3, r3, #4
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d015      	beq.n	80046d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fe fb6c 	bl	8002d84 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fe fb68 	bl	8002d84 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0cb      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ee      	beq.n	80046b0 <HAL_RCC_OscConfig+0x334>
 80046d2:	e014      	b.n	80046fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d4:	f7fe fb56 	bl	8002d84 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fe fb52 	bl	8002d84 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0b5      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f2:	4b3e      	ldr	r3, [pc, #248]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ee      	bne.n	80046dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b39      	ldr	r3, [pc, #228]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	4a38      	ldr	r2, [pc, #224]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a1 	beq.w	800485c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800471a:	4b34      	ldr	r3, [pc, #208]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b08      	cmp	r3, #8
 8004724:	d05c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d141      	bne.n	80047b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <HAL_RCC_OscConfig+0x478>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fe fb26 	bl	8002d84 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473c:	f7fe fb22 	bl	8002d84 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e087      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	019b      	lsls	r3, r3, #6
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	491b      	ldr	r1, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x478>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fe fafb 	bl	8002d84 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fe faf7 	bl	8002d84 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e05c      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x416>
 80047b0:	e054      	b.n	800485c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCC_OscConfig+0x478>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fe fae4 	bl	8002d84 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fe fae0 	bl	8002d84 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e045      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_RCC_OscConfig+0x470>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x444>
 80047de:	e03d      	b.n	800485c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e038      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000
 80047f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d028      	beq.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d121      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d11a      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800482e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	3b01      	subs	r3, #1
 8004842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800

0800486c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0cc      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b68      	ldr	r3, [pc, #416]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d90c      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b8      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d8:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	494d      	ldr	r1, [pc, #308]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d044      	beq.n	800498c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d119      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d003      	beq.n	800492a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	2b03      	cmp	r3, #3
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e067      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494a:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4934      	ldr	r1, [pc, #208]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800495c:	f7fe fa12 	bl	8002d84 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fe fa0e 	bl	8002d84 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e04f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 020c 	and.w	r2, r3, #12
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	429a      	cmp	r2, r3
 800498a:	d1eb      	bne.n	8004964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d20c      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	490e      	ldr	r1, [pc, #56]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049f2:	f000 f821 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	490a      	ldr	r1, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	5ccb      	ldrb	r3, [r1, r3]
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f972 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023c00 	.word	0x40023c00
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08006fd4 	.word	0x08006fd4
 8004a30:	20000114 	.word	0x20000114
 8004a34:	2000019c 	.word	0x2000019c

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b090      	sub	sp, #64	; 0x40
 8004a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
 8004a44:	2300      	movs	r3, #0
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a48:	2300      	movs	r3, #0
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a50:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d00d      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x40>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	f200 80a1 	bhi.w	8004ba4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x34>
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6a:	e09b      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8004a6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a70:	e09b      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a76:	e098      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b4f      	ldr	r3, [pc, #316]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a82:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b4a      	ldr	r3, [pc, #296]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	2200      	movs	r2, #0
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	627a      	str	r2, [r7, #36]	; 0x24
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa4:	fb03 f201 	mul.w	r2, r3, r1
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	fb00 f303 	mul.w	r3, r0, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a43      	ldr	r2, [pc, #268]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ab2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab8:	460a      	mov	r2, r1
 8004aba:	62ba      	str	r2, [r7, #40]	; 0x28
 8004abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004abe:	4413      	add	r3, r2
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	61fa      	str	r2, [r7, #28]
 8004aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ad2:	f7fb fc35 	bl	8000340 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4613      	mov	r3, r2
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ade:	e053      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae0:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	617a      	str	r2, [r7, #20]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004af2:	f04f 0b00 	mov.w	fp, #0
 8004af6:	4652      	mov	r2, sl
 8004af8:	465b      	mov	r3, fp
 8004afa:	f04f 0000 	mov.w	r0, #0
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	0159      	lsls	r1, r3, #5
 8004b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b08:	0150      	lsls	r0, r2, #5
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	ebb2 080a 	subs.w	r8, r2, sl
 8004b12:	eb63 090b 	sbc.w	r9, r3, fp
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b2a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b2e:	eb63 0509 	sbc.w	r5, r3, r9
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	00eb      	lsls	r3, r5, #3
 8004b3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b40:	00e2      	lsls	r2, r4, #3
 8004b42:	4614      	mov	r4, r2
 8004b44:	461d      	mov	r5, r3
 8004b46:	eb14 030a 	adds.w	r3, r4, sl
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	eb45 030b 	adc.w	r3, r5, fp
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b5e:	4629      	mov	r1, r5
 8004b60:	028b      	lsls	r3, r1, #10
 8004b62:	4621      	mov	r1, r4
 8004b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b68:	4621      	mov	r1, r4
 8004b6a:	028a      	lsls	r2, r1, #10
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	2200      	movs	r2, #0
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	60fa      	str	r2, [r7, #12]
 8004b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b7c:	f7fb fbe0 	bl	8000340 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	3301      	adds	r3, #1
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3740      	adds	r7, #64	; 0x40
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	017d7840 	.word	0x017d7840

08004bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20000114 	.word	0x20000114

08004bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004be0:	f7ff fff0 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	0a9b      	lsrs	r3, r3, #10
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4903      	ldr	r1, [pc, #12]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	08006fe4 	.word	0x08006fe4

08004c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c08:	f7ff ffdc 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	0b5b      	lsrs	r3, r3, #13
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	08006fe4 	.word	0x08006fe4

08004c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e03f      	b.n	8004cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd ffbe 	bl	8002bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f929 	bl	8004ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08a      	sub	sp, #40	; 0x28
 8004cca:	af02      	add	r7, sp, #8
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d17c      	bne.n	8004de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit+0x2c>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e075      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Transmit+0x3e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e06e      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2221      	movs	r2, #33	; 0x21
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fe f833 	bl	8002d84 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d108      	bne.n	8004d48 <HAL_UART_Transmit+0x82>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d58:	e02a      	b.n	8004db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f840 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e036      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e007      	b.n	8004da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cf      	bne.n	8004d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f810 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b090      	sub	sp, #64	; 0x40
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfa:	e050      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d04c      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e0a:	f7fd ffbb 	bl	8002d84 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d241      	bcs.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e5      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3314      	adds	r3, #20
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3314      	adds	r3, #20
 8004e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6e:	623a      	str	r2, [r7, #32]
 8004e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00f      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d09f      	beq.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3740      	adds	r7, #64	; 0x40
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b0c0      	sub	sp, #256	; 0x100
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	ea40 0301 	orr.w	r3, r0, r1
 8004ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f20:	f021 010c 	bic.w	r1, r1, #12
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	6999      	ldr	r1, [r3, #24]
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	ea40 0301 	orr.w	r3, r0, r1
 8004f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b8f      	ldr	r3, [pc, #572]	; (8005194 <UART_SetConfig+0x2cc>)
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d005      	beq.n	8004f68 <UART_SetConfig+0xa0>
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b8d      	ldr	r3, [pc, #564]	; (8005198 <UART_SetConfig+0x2d0>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d104      	bne.n	8004f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7ff fe4c 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f70:	e003      	b.n	8004f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f72:	f7ff fe33 	bl	8004bdc <HAL_RCC_GetPCLK1Freq>
 8004f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	f040 810c 	bne.w	80051a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004faa:	4621      	mov	r1, r4
 8004fac:	eb12 0801 	adds.w	r8, r2, r1
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	eb43 0901 	adc.w	r9, r3, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	eb18 0303 	adds.w	r3, r8, r3
 8004fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fd8:	462b      	mov	r3, r5
 8004fda:	eb49 0303 	adc.w	r3, r9, r3
 8004fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	18db      	adds	r3, r3, r3
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	eb42 0303 	adc.w	r3, r2, r3
 8005002:	657b      	str	r3, [r7, #84]	; 0x54
 8005004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800500c:	f7fb f998 	bl	8000340 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b61      	ldr	r3, [pc, #388]	; (800519c <UART_SetConfig+0x2d4>)
 8005016:	fba3 2302 	umull	r2, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	011c      	lsls	r4, r3, #4
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800502c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	1891      	adds	r1, r2, r2
 8005036:	64b9      	str	r1, [r7, #72]	; 0x48
 8005038:	415b      	adcs	r3, r3
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005040:	4641      	mov	r1, r8
 8005042:	eb12 0a01 	adds.w	sl, r2, r1
 8005046:	4649      	mov	r1, r9
 8005048:	eb43 0b01 	adc.w	fp, r3, r1
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800505c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005060:	4692      	mov	sl, r2
 8005062:	469b      	mov	fp, r3
 8005064:	4643      	mov	r3, r8
 8005066:	eb1a 0303 	adds.w	r3, sl, r3
 800506a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800506e:	464b      	mov	r3, r9
 8005070:	eb4b 0303 	adc.w	r3, fp, r3
 8005074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800508c:	460b      	mov	r3, r1
 800508e:	18db      	adds	r3, r3, r3
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
 8005092:	4613      	mov	r3, r2
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
 800509a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800509e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050a2:	f7fb f94d 	bl	8000340 <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <UART_SetConfig+0x2d4>)
 80050ae:	fba3 2301 	umull	r2, r3, r3, r1
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2264      	movs	r2, #100	; 0x64
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	1acb      	subs	r3, r1, r3
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <UART_SetConfig+0x2d4>)
 80050c4:	fba3 2302 	umull	r2, r3, r3, r2
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80050ec:	415b      	adcs	r3, r3
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050f4:	4641      	mov	r1, r8
 80050f6:	1851      	adds	r1, r2, r1
 80050f8:	6339      	str	r1, [r7, #48]	; 0x30
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800510c:	4659      	mov	r1, fp
 800510e:	00cb      	lsls	r3, r1, #3
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005116:	4651      	mov	r1, sl
 8005118:	00ca      	lsls	r2, r1, #3
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4603      	mov	r3, r0
 8005120:	4642      	mov	r2, r8
 8005122:	189b      	adds	r3, r3, r2
 8005124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005128:	464b      	mov	r3, r9
 800512a:	460a      	mov	r2, r1
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005148:	460b      	mov	r3, r1
 800514a:	18db      	adds	r3, r3, r3
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	4613      	mov	r3, r2
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800515e:	f7fb f8ef 	bl	8000340 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <UART_SetConfig+0x2d4>)
 8005168:	fba3 1302 	umull	r1, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	2164      	movs	r1, #100	; 0x64
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	3332      	adds	r3, #50	; 0x32
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <UART_SetConfig+0x2d4>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	f003 0207 	and.w	r2, r3, #7
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4422      	add	r2, r4
 800518e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005190:	e105      	b.n	800539e <UART_SetConfig+0x4d6>
 8005192:	bf00      	nop
 8005194:	40011000 	.word	0x40011000
 8005198:	40011400 	.word	0x40011400
 800519c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051b2:	4642      	mov	r2, r8
 80051b4:	464b      	mov	r3, r9
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	6239      	str	r1, [r7, #32]
 80051ba:	415b      	adcs	r3, r3
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c2:	4641      	mov	r1, r8
 80051c4:	1854      	adds	r4, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0501 	adc.w	r5, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	00eb      	lsls	r3, r5, #3
 80051d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051da:	00e2      	lsls	r2, r4, #3
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	18e3      	adds	r3, r4, r3
 80051e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051e8:	464b      	mov	r3, r9
 80051ea:	eb45 0303 	adc.w	r3, r5, r3
 80051ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800520e:	4629      	mov	r1, r5
 8005210:	008b      	lsls	r3, r1, #2
 8005212:	4621      	mov	r1, r4
 8005214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005218:	4621      	mov	r1, r4
 800521a:	008a      	lsls	r2, r1, #2
 800521c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005220:	f7fb f88e 	bl	8000340 <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4b60      	ldr	r3, [pc, #384]	; (80053ac <UART_SetConfig+0x4e4>)
 800522a:	fba3 2302 	umull	r2, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	011c      	lsls	r4, r3, #4
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	61b9      	str	r1, [r7, #24]
 800524c:	415b      	adcs	r3, r3
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6139      	str	r1, [r7, #16]
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005288:	464b      	mov	r3, r9
 800528a:	460a      	mov	r2, r1
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	67bb      	str	r3, [r7, #120]	; 0x78
 800529e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052ac:	4649      	mov	r1, r9
 80052ae:	008b      	lsls	r3, r1, #2
 80052b0:	4641      	mov	r1, r8
 80052b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b6:	4641      	mov	r1, r8
 80052b8:	008a      	lsls	r2, r1, #2
 80052ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052be:	f7fb f83f 	bl	8000340 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b39      	ldr	r3, [pc, #228]	; (80053ac <UART_SetConfig+0x4e4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a34      	ldr	r2, [pc, #208]	; (80053ac <UART_SetConfig+0x4e4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e6:	441c      	add	r4, r3
 80052e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ec:	2200      	movs	r2, #0
 80052ee:	673b      	str	r3, [r7, #112]	; 0x70
 80052f0:	677a      	str	r2, [r7, #116]	; 0x74
 80052f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052f6:	4642      	mov	r2, r8
 80052f8:	464b      	mov	r3, r9
 80052fa:	1891      	adds	r1, r2, r2
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	415b      	adcs	r3, r3
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005306:	4641      	mov	r1, r8
 8005308:	1851      	adds	r1, r2, r1
 800530a:	6039      	str	r1, [r7, #0]
 800530c:	4649      	mov	r1, r9
 800530e:	414b      	adcs	r3, r1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800531e:	4659      	mov	r1, fp
 8005320:	00cb      	lsls	r3, r1, #3
 8005322:	4651      	mov	r1, sl
 8005324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005328:	4651      	mov	r1, sl
 800532a:	00ca      	lsls	r2, r1, #3
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	4603      	mov	r3, r0
 8005332:	4642      	mov	r2, r8
 8005334:	189b      	adds	r3, r3, r2
 8005336:	66bb      	str	r3, [r7, #104]	; 0x68
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	663b      	str	r3, [r7, #96]	; 0x60
 800534c:	667a      	str	r2, [r7, #100]	; 0x64
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800535a:	4649      	mov	r1, r9
 800535c:	008b      	lsls	r3, r1, #2
 800535e:	4641      	mov	r1, r8
 8005360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005364:	4641      	mov	r1, r8
 8005366:	008a      	lsls	r2, r1, #2
 8005368:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800536c:	f7fa ffe8 	bl	8000340 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <UART_SetConfig+0x4e4>)
 8005376:	fba3 1302 	umull	r1, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	2164      	movs	r1, #100	; 0x64
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	3332      	adds	r3, #50	; 0x32
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <UART_SetConfig+0x4e4>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	f003 020f 	and.w	r2, r3, #15
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4422      	add	r2, r4
 800539c:	609a      	str	r2, [r3, #8]
}
 800539e:	bf00      	nop
 80053a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053a4:	46bd      	mov	sp, r7
 80053a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053aa:	bf00      	nop
 80053ac:	51eb851f 	.word	0x51eb851f

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	200001a4 	.word	0x200001a4

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4d0d      	ldr	r5, [pc, #52]	; (80053f4 <__libc_init_array+0x38>)
 80053c0:	4c0d      	ldr	r4, [pc, #52]	; (80053f8 <__libc_init_array+0x3c>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	2600      	movs	r6, #0
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	4d0b      	ldr	r5, [pc, #44]	; (80053fc <__libc_init_array+0x40>)
 80053ce:	4c0c      	ldr	r4, [pc, #48]	; (8005400 <__libc_init_array+0x44>)
 80053d0:	f001 f904 	bl	80065dc <_init>
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	2600      	movs	r6, #0
 80053da:	42a6      	cmp	r6, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e4:	4798      	blx	r3
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ee:	4798      	blx	r3
 80053f0:	3601      	adds	r6, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	08007190 	.word	0x08007190
 80053f8:	08007190 	.word	0x08007190
 80053fc:	08007190 	.word	0x08007190
 8005400:	08007194 	.word	0x08007194

08005404 <__retarget_lock_init_recursive>:
 8005404:	4770      	bx	lr

08005406 <__retarget_lock_acquire_recursive>:
 8005406:	4770      	bx	lr

08005408 <__retarget_lock_release_recursive>:
 8005408:	4770      	bx	lr
	...

0800540c <malloc>:
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <malloc+0xc>)
 800540e:	4601      	mov	r1, r0
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f000 b88d 	b.w	8005530 <_malloc_r>
 8005416:	bf00      	nop
 8005418:	200001a4 	.word	0x200001a4

0800541c <free>:
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <free+0xc>)
 800541e:	4601      	mov	r1, r0
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f000 b819 	b.w	8005458 <_free_r>
 8005426:	bf00      	nop
 8005428:	200001a4 	.word	0x200001a4

0800542c <memcpy>:
 800542c:	440a      	add	r2, r1
 800542e:	4291      	cmp	r1, r2
 8005430:	f100 33ff 	add.w	r3, r0, #4294967295
 8005434:	d100      	bne.n	8005438 <memcpy+0xc>
 8005436:	4770      	bx	lr
 8005438:	b510      	push	{r4, lr}
 800543a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800543e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005442:	4291      	cmp	r1, r2
 8005444:	d1f9      	bne.n	800543a <memcpy+0xe>
 8005446:	bd10      	pop	{r4, pc}

08005448 <memset>:
 8005448:	4402      	add	r2, r0
 800544a:	4603      	mov	r3, r0
 800544c:	4293      	cmp	r3, r2
 800544e:	d100      	bne.n	8005452 <memset+0xa>
 8005450:	4770      	bx	lr
 8005452:	f803 1b01 	strb.w	r1, [r3], #1
 8005456:	e7f9      	b.n	800544c <memset+0x4>

08005458 <_free_r>:
 8005458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800545a:	2900      	cmp	r1, #0
 800545c:	d044      	beq.n	80054e8 <_free_r+0x90>
 800545e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005462:	9001      	str	r0, [sp, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f1a1 0404 	sub.w	r4, r1, #4
 800546a:	bfb8      	it	lt
 800546c:	18e4      	addlt	r4, r4, r3
 800546e:	f000 fffd 	bl	800646c <__malloc_lock>
 8005472:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <_free_r+0x94>)
 8005474:	9801      	ldr	r0, [sp, #4]
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	b933      	cbnz	r3, 8005488 <_free_r+0x30>
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	6014      	str	r4, [r2, #0]
 800547e:	b003      	add	sp, #12
 8005480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005484:	f000 bff8 	b.w	8006478 <__malloc_unlock>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d908      	bls.n	800549e <_free_r+0x46>
 800548c:	6825      	ldr	r5, [r4, #0]
 800548e:	1961      	adds	r1, r4, r5
 8005490:	428b      	cmp	r3, r1
 8005492:	bf01      	itttt	eq
 8005494:	6819      	ldreq	r1, [r3, #0]
 8005496:	685b      	ldreq	r3, [r3, #4]
 8005498:	1949      	addeq	r1, r1, r5
 800549a:	6021      	streq	r1, [r4, #0]
 800549c:	e7ed      	b.n	800547a <_free_r+0x22>
 800549e:	461a      	mov	r2, r3
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b10b      	cbz	r3, 80054a8 <_free_r+0x50>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d9fa      	bls.n	800549e <_free_r+0x46>
 80054a8:	6811      	ldr	r1, [r2, #0]
 80054aa:	1855      	adds	r5, r2, r1
 80054ac:	42a5      	cmp	r5, r4
 80054ae:	d10b      	bne.n	80054c8 <_free_r+0x70>
 80054b0:	6824      	ldr	r4, [r4, #0]
 80054b2:	4421      	add	r1, r4
 80054b4:	1854      	adds	r4, r2, r1
 80054b6:	42a3      	cmp	r3, r4
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	d1e0      	bne.n	800547e <_free_r+0x26>
 80054bc:	681c      	ldr	r4, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	6053      	str	r3, [r2, #4]
 80054c2:	4421      	add	r1, r4
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	e7da      	b.n	800547e <_free_r+0x26>
 80054c8:	d902      	bls.n	80054d0 <_free_r+0x78>
 80054ca:	230c      	movs	r3, #12
 80054cc:	6003      	str	r3, [r0, #0]
 80054ce:	e7d6      	b.n	800547e <_free_r+0x26>
 80054d0:	6825      	ldr	r5, [r4, #0]
 80054d2:	1961      	adds	r1, r4, r5
 80054d4:	428b      	cmp	r3, r1
 80054d6:	bf04      	itt	eq
 80054d8:	6819      	ldreq	r1, [r3, #0]
 80054da:	685b      	ldreq	r3, [r3, #4]
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	bf04      	itt	eq
 80054e0:	1949      	addeq	r1, r1, r5
 80054e2:	6021      	streq	r1, [r4, #0]
 80054e4:	6054      	str	r4, [r2, #4]
 80054e6:	e7ca      	b.n	800547e <_free_r+0x26>
 80054e8:	b003      	add	sp, #12
 80054ea:	bd30      	pop	{r4, r5, pc}
 80054ec:	200006cc 	.word	0x200006cc

080054f0 <sbrk_aligned>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4e0e      	ldr	r6, [pc, #56]	; (800552c <sbrk_aligned+0x3c>)
 80054f4:	460c      	mov	r4, r1
 80054f6:	6831      	ldr	r1, [r6, #0]
 80054f8:	4605      	mov	r5, r0
 80054fa:	b911      	cbnz	r1, 8005502 <sbrk_aligned+0x12>
 80054fc:	f000 fc08 	bl	8005d10 <_sbrk_r>
 8005500:	6030      	str	r0, [r6, #0]
 8005502:	4621      	mov	r1, r4
 8005504:	4628      	mov	r0, r5
 8005506:	f000 fc03 	bl	8005d10 <_sbrk_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d00a      	beq.n	8005524 <sbrk_aligned+0x34>
 800550e:	1cc4      	adds	r4, r0, #3
 8005510:	f024 0403 	bic.w	r4, r4, #3
 8005514:	42a0      	cmp	r0, r4
 8005516:	d007      	beq.n	8005528 <sbrk_aligned+0x38>
 8005518:	1a21      	subs	r1, r4, r0
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fbf8 	bl	8005d10 <_sbrk_r>
 8005520:	3001      	adds	r0, #1
 8005522:	d101      	bne.n	8005528 <sbrk_aligned+0x38>
 8005524:	f04f 34ff 	mov.w	r4, #4294967295
 8005528:	4620      	mov	r0, r4
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	200006d0 	.word	0x200006d0

08005530 <_malloc_r>:
 8005530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005534:	1ccd      	adds	r5, r1, #3
 8005536:	f025 0503 	bic.w	r5, r5, #3
 800553a:	3508      	adds	r5, #8
 800553c:	2d0c      	cmp	r5, #12
 800553e:	bf38      	it	cc
 8005540:	250c      	movcc	r5, #12
 8005542:	2d00      	cmp	r5, #0
 8005544:	4607      	mov	r7, r0
 8005546:	db01      	blt.n	800554c <_malloc_r+0x1c>
 8005548:	42a9      	cmp	r1, r5
 800554a:	d905      	bls.n	8005558 <_malloc_r+0x28>
 800554c:	230c      	movs	r3, #12
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	2600      	movs	r6, #0
 8005552:	4630      	mov	r0, r6
 8005554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005558:	4e2e      	ldr	r6, [pc, #184]	; (8005614 <_malloc_r+0xe4>)
 800555a:	f000 ff87 	bl	800646c <__malloc_lock>
 800555e:	6833      	ldr	r3, [r6, #0]
 8005560:	461c      	mov	r4, r3
 8005562:	bb34      	cbnz	r4, 80055b2 <_malloc_r+0x82>
 8005564:	4629      	mov	r1, r5
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff ffc2 	bl	80054f0 <sbrk_aligned>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	4604      	mov	r4, r0
 8005570:	d14d      	bne.n	800560e <_malloc_r+0xde>
 8005572:	6834      	ldr	r4, [r6, #0]
 8005574:	4626      	mov	r6, r4
 8005576:	2e00      	cmp	r6, #0
 8005578:	d140      	bne.n	80055fc <_malloc_r+0xcc>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	4631      	mov	r1, r6
 800557e:	4638      	mov	r0, r7
 8005580:	eb04 0803 	add.w	r8, r4, r3
 8005584:	f000 fbc4 	bl	8005d10 <_sbrk_r>
 8005588:	4580      	cmp	r8, r0
 800558a:	d13a      	bne.n	8005602 <_malloc_r+0xd2>
 800558c:	6821      	ldr	r1, [r4, #0]
 800558e:	3503      	adds	r5, #3
 8005590:	1a6d      	subs	r5, r5, r1
 8005592:	f025 0503 	bic.w	r5, r5, #3
 8005596:	3508      	adds	r5, #8
 8005598:	2d0c      	cmp	r5, #12
 800559a:	bf38      	it	cc
 800559c:	250c      	movcc	r5, #12
 800559e:	4629      	mov	r1, r5
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7ff ffa5 	bl	80054f0 <sbrk_aligned>
 80055a6:	3001      	adds	r0, #1
 80055a8:	d02b      	beq.n	8005602 <_malloc_r+0xd2>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	442b      	add	r3, r5
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	e00e      	b.n	80055d0 <_malloc_r+0xa0>
 80055b2:	6822      	ldr	r2, [r4, #0]
 80055b4:	1b52      	subs	r2, r2, r5
 80055b6:	d41e      	bmi.n	80055f6 <_malloc_r+0xc6>
 80055b8:	2a0b      	cmp	r2, #11
 80055ba:	d916      	bls.n	80055ea <_malloc_r+0xba>
 80055bc:	1961      	adds	r1, r4, r5
 80055be:	42a3      	cmp	r3, r4
 80055c0:	6025      	str	r5, [r4, #0]
 80055c2:	bf18      	it	ne
 80055c4:	6059      	strne	r1, [r3, #4]
 80055c6:	6863      	ldr	r3, [r4, #4]
 80055c8:	bf08      	it	eq
 80055ca:	6031      	streq	r1, [r6, #0]
 80055cc:	5162      	str	r2, [r4, r5]
 80055ce:	604b      	str	r3, [r1, #4]
 80055d0:	4638      	mov	r0, r7
 80055d2:	f104 060b 	add.w	r6, r4, #11
 80055d6:	f000 ff4f 	bl	8006478 <__malloc_unlock>
 80055da:	f026 0607 	bic.w	r6, r6, #7
 80055de:	1d23      	adds	r3, r4, #4
 80055e0:	1af2      	subs	r2, r6, r3
 80055e2:	d0b6      	beq.n	8005552 <_malloc_r+0x22>
 80055e4:	1b9b      	subs	r3, r3, r6
 80055e6:	50a3      	str	r3, [r4, r2]
 80055e8:	e7b3      	b.n	8005552 <_malloc_r+0x22>
 80055ea:	6862      	ldr	r2, [r4, #4]
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	bf0c      	ite	eq
 80055f0:	6032      	streq	r2, [r6, #0]
 80055f2:	605a      	strne	r2, [r3, #4]
 80055f4:	e7ec      	b.n	80055d0 <_malloc_r+0xa0>
 80055f6:	4623      	mov	r3, r4
 80055f8:	6864      	ldr	r4, [r4, #4]
 80055fa:	e7b2      	b.n	8005562 <_malloc_r+0x32>
 80055fc:	4634      	mov	r4, r6
 80055fe:	6876      	ldr	r6, [r6, #4]
 8005600:	e7b9      	b.n	8005576 <_malloc_r+0x46>
 8005602:	230c      	movs	r3, #12
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4638      	mov	r0, r7
 8005608:	f000 ff36 	bl	8006478 <__malloc_unlock>
 800560c:	e7a1      	b.n	8005552 <_malloc_r+0x22>
 800560e:	6025      	str	r5, [r4, #0]
 8005610:	e7de      	b.n	80055d0 <_malloc_r+0xa0>
 8005612:	bf00      	nop
 8005614:	200006cc 	.word	0x200006cc

08005618 <__sfputc_r>:
 8005618:	6893      	ldr	r3, [r2, #8]
 800561a:	3b01      	subs	r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	b410      	push	{r4}
 8005620:	6093      	str	r3, [r2, #8]
 8005622:	da08      	bge.n	8005636 <__sfputc_r+0x1e>
 8005624:	6994      	ldr	r4, [r2, #24]
 8005626:	42a3      	cmp	r3, r4
 8005628:	db01      	blt.n	800562e <__sfputc_r+0x16>
 800562a:	290a      	cmp	r1, #10
 800562c:	d103      	bne.n	8005636 <__sfputc_r+0x1e>
 800562e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005632:	f000 bc3f 	b.w	8005eb4 <__swbuf_r>
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	1c58      	adds	r0, r3, #1
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	7019      	strb	r1, [r3, #0]
 800563e:	4608      	mov	r0, r1
 8005640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005644:	4770      	bx	lr

08005646 <__sfputs_r>:
 8005646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005648:	4606      	mov	r6, r0
 800564a:	460f      	mov	r7, r1
 800564c:	4614      	mov	r4, r2
 800564e:	18d5      	adds	r5, r2, r3
 8005650:	42ac      	cmp	r4, r5
 8005652:	d101      	bne.n	8005658 <__sfputs_r+0x12>
 8005654:	2000      	movs	r0, #0
 8005656:	e007      	b.n	8005668 <__sfputs_r+0x22>
 8005658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565c:	463a      	mov	r2, r7
 800565e:	4630      	mov	r0, r6
 8005660:	f7ff ffda 	bl	8005618 <__sfputc_r>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d1f3      	bne.n	8005650 <__sfputs_r+0xa>
 8005668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800566c <_vfiprintf_r>:
 800566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005670:	460d      	mov	r5, r1
 8005672:	b09d      	sub	sp, #116	; 0x74
 8005674:	4614      	mov	r4, r2
 8005676:	4698      	mov	r8, r3
 8005678:	4606      	mov	r6, r0
 800567a:	b118      	cbz	r0, 8005684 <_vfiprintf_r+0x18>
 800567c:	6983      	ldr	r3, [r0, #24]
 800567e:	b90b      	cbnz	r3, 8005684 <_vfiprintf_r+0x18>
 8005680:	f000 fdf2 	bl	8006268 <__sinit>
 8005684:	4b89      	ldr	r3, [pc, #548]	; (80058ac <_vfiprintf_r+0x240>)
 8005686:	429d      	cmp	r5, r3
 8005688:	d11b      	bne.n	80056c2 <_vfiprintf_r+0x56>
 800568a:	6875      	ldr	r5, [r6, #4]
 800568c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800568e:	07d9      	lsls	r1, r3, #31
 8005690:	d405      	bmi.n	800569e <_vfiprintf_r+0x32>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	059a      	lsls	r2, r3, #22
 8005696:	d402      	bmi.n	800569e <_vfiprintf_r+0x32>
 8005698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800569a:	f7ff feb4 	bl	8005406 <__retarget_lock_acquire_recursive>
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	d501      	bpl.n	80056a8 <_vfiprintf_r+0x3c>
 80056a4:	692b      	ldr	r3, [r5, #16]
 80056a6:	b9eb      	cbnz	r3, 80056e4 <_vfiprintf_r+0x78>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 fc54 	bl	8005f58 <__swsetup_r>
 80056b0:	b1c0      	cbz	r0, 80056e4 <_vfiprintf_r+0x78>
 80056b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b4:	07dc      	lsls	r4, r3, #31
 80056b6:	d50e      	bpl.n	80056d6 <_vfiprintf_r+0x6a>
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	b01d      	add	sp, #116	; 0x74
 80056be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c2:	4b7b      	ldr	r3, [pc, #492]	; (80058b0 <_vfiprintf_r+0x244>)
 80056c4:	429d      	cmp	r5, r3
 80056c6:	d101      	bne.n	80056cc <_vfiprintf_r+0x60>
 80056c8:	68b5      	ldr	r5, [r6, #8]
 80056ca:	e7df      	b.n	800568c <_vfiprintf_r+0x20>
 80056cc:	4b79      	ldr	r3, [pc, #484]	; (80058b4 <_vfiprintf_r+0x248>)
 80056ce:	429d      	cmp	r5, r3
 80056d0:	bf08      	it	eq
 80056d2:	68f5      	ldreq	r5, [r6, #12]
 80056d4:	e7da      	b.n	800568c <_vfiprintf_r+0x20>
 80056d6:	89ab      	ldrh	r3, [r5, #12]
 80056d8:	0598      	lsls	r0, r3, #22
 80056da:	d4ed      	bmi.n	80056b8 <_vfiprintf_r+0x4c>
 80056dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056de:	f7ff fe93 	bl	8005408 <__retarget_lock_release_recursive>
 80056e2:	e7e9      	b.n	80056b8 <_vfiprintf_r+0x4c>
 80056e4:	2300      	movs	r3, #0
 80056e6:	9309      	str	r3, [sp, #36]	; 0x24
 80056e8:	2320      	movs	r3, #32
 80056ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80056f2:	2330      	movs	r3, #48	; 0x30
 80056f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058b8 <_vfiprintf_r+0x24c>
 80056f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056fc:	f04f 0901 	mov.w	r9, #1
 8005700:	4623      	mov	r3, r4
 8005702:	469a      	mov	sl, r3
 8005704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005708:	b10a      	cbz	r2, 800570e <_vfiprintf_r+0xa2>
 800570a:	2a25      	cmp	r2, #37	; 0x25
 800570c:	d1f9      	bne.n	8005702 <_vfiprintf_r+0x96>
 800570e:	ebba 0b04 	subs.w	fp, sl, r4
 8005712:	d00b      	beq.n	800572c <_vfiprintf_r+0xc0>
 8005714:	465b      	mov	r3, fp
 8005716:	4622      	mov	r2, r4
 8005718:	4629      	mov	r1, r5
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff ff93 	bl	8005646 <__sfputs_r>
 8005720:	3001      	adds	r0, #1
 8005722:	f000 80aa 	beq.w	800587a <_vfiprintf_r+0x20e>
 8005726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005728:	445a      	add	r2, fp
 800572a:	9209      	str	r2, [sp, #36]	; 0x24
 800572c:	f89a 3000 	ldrb.w	r3, [sl]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a2 	beq.w	800587a <_vfiprintf_r+0x20e>
 8005736:	2300      	movs	r3, #0
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005740:	f10a 0a01 	add.w	sl, sl, #1
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	9307      	str	r3, [sp, #28]
 8005748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800574c:	931a      	str	r3, [sp, #104]	; 0x68
 800574e:	4654      	mov	r4, sl
 8005750:	2205      	movs	r2, #5
 8005752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005756:	4858      	ldr	r0, [pc, #352]	; (80058b8 <_vfiprintf_r+0x24c>)
 8005758:	f7fa fd52 	bl	8000200 <memchr>
 800575c:	9a04      	ldr	r2, [sp, #16]
 800575e:	b9d8      	cbnz	r0, 8005798 <_vfiprintf_r+0x12c>
 8005760:	06d1      	lsls	r1, r2, #27
 8005762:	bf44      	itt	mi
 8005764:	2320      	movmi	r3, #32
 8005766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576a:	0713      	lsls	r3, r2, #28
 800576c:	bf44      	itt	mi
 800576e:	232b      	movmi	r3, #43	; 0x2b
 8005770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005774:	f89a 3000 	ldrb.w	r3, [sl]
 8005778:	2b2a      	cmp	r3, #42	; 0x2a
 800577a:	d015      	beq.n	80057a8 <_vfiprintf_r+0x13c>
 800577c:	9a07      	ldr	r2, [sp, #28]
 800577e:	4654      	mov	r4, sl
 8005780:	2000      	movs	r0, #0
 8005782:	f04f 0c0a 	mov.w	ip, #10
 8005786:	4621      	mov	r1, r4
 8005788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800578c:	3b30      	subs	r3, #48	; 0x30
 800578e:	2b09      	cmp	r3, #9
 8005790:	d94e      	bls.n	8005830 <_vfiprintf_r+0x1c4>
 8005792:	b1b0      	cbz	r0, 80057c2 <_vfiprintf_r+0x156>
 8005794:	9207      	str	r2, [sp, #28]
 8005796:	e014      	b.n	80057c2 <_vfiprintf_r+0x156>
 8005798:	eba0 0308 	sub.w	r3, r0, r8
 800579c:	fa09 f303 	lsl.w	r3, r9, r3
 80057a0:	4313      	orrs	r3, r2
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	46a2      	mov	sl, r4
 80057a6:	e7d2      	b.n	800574e <_vfiprintf_r+0xe2>
 80057a8:	9b03      	ldr	r3, [sp, #12]
 80057aa:	1d19      	adds	r1, r3, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	9103      	str	r1, [sp, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bfbb      	ittet	lt
 80057b4:	425b      	neglt	r3, r3
 80057b6:	f042 0202 	orrlt.w	r2, r2, #2
 80057ba:	9307      	strge	r3, [sp, #28]
 80057bc:	9307      	strlt	r3, [sp, #28]
 80057be:	bfb8      	it	lt
 80057c0:	9204      	strlt	r2, [sp, #16]
 80057c2:	7823      	ldrb	r3, [r4, #0]
 80057c4:	2b2e      	cmp	r3, #46	; 0x2e
 80057c6:	d10c      	bne.n	80057e2 <_vfiprintf_r+0x176>
 80057c8:	7863      	ldrb	r3, [r4, #1]
 80057ca:	2b2a      	cmp	r3, #42	; 0x2a
 80057cc:	d135      	bne.n	800583a <_vfiprintf_r+0x1ce>
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	1d1a      	adds	r2, r3, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	9203      	str	r2, [sp, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bfb8      	it	lt
 80057da:	f04f 33ff 	movlt.w	r3, #4294967295
 80057de:	3402      	adds	r4, #2
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058c8 <_vfiprintf_r+0x25c>
 80057e6:	7821      	ldrb	r1, [r4, #0]
 80057e8:	2203      	movs	r2, #3
 80057ea:	4650      	mov	r0, sl
 80057ec:	f7fa fd08 	bl	8000200 <memchr>
 80057f0:	b140      	cbz	r0, 8005804 <_vfiprintf_r+0x198>
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	eba0 000a 	sub.w	r0, r0, sl
 80057f8:	fa03 f000 	lsl.w	r0, r3, r0
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	4303      	orrs	r3, r0
 8005800:	3401      	adds	r4, #1
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005808:	482c      	ldr	r0, [pc, #176]	; (80058bc <_vfiprintf_r+0x250>)
 800580a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800580e:	2206      	movs	r2, #6
 8005810:	f7fa fcf6 	bl	8000200 <memchr>
 8005814:	2800      	cmp	r0, #0
 8005816:	d03f      	beq.n	8005898 <_vfiprintf_r+0x22c>
 8005818:	4b29      	ldr	r3, [pc, #164]	; (80058c0 <_vfiprintf_r+0x254>)
 800581a:	bb1b      	cbnz	r3, 8005864 <_vfiprintf_r+0x1f8>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	3307      	adds	r3, #7
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	3308      	adds	r3, #8
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582a:	443b      	add	r3, r7
 800582c:	9309      	str	r3, [sp, #36]	; 0x24
 800582e:	e767      	b.n	8005700 <_vfiprintf_r+0x94>
 8005830:	fb0c 3202 	mla	r2, ip, r2, r3
 8005834:	460c      	mov	r4, r1
 8005836:	2001      	movs	r0, #1
 8005838:	e7a5      	b.n	8005786 <_vfiprintf_r+0x11a>
 800583a:	2300      	movs	r3, #0
 800583c:	3401      	adds	r4, #1
 800583e:	9305      	str	r3, [sp, #20]
 8005840:	4619      	mov	r1, r3
 8005842:	f04f 0c0a 	mov.w	ip, #10
 8005846:	4620      	mov	r0, r4
 8005848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800584c:	3a30      	subs	r2, #48	; 0x30
 800584e:	2a09      	cmp	r2, #9
 8005850:	d903      	bls.n	800585a <_vfiprintf_r+0x1ee>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0c5      	beq.n	80057e2 <_vfiprintf_r+0x176>
 8005856:	9105      	str	r1, [sp, #20]
 8005858:	e7c3      	b.n	80057e2 <_vfiprintf_r+0x176>
 800585a:	fb0c 2101 	mla	r1, ip, r1, r2
 800585e:	4604      	mov	r4, r0
 8005860:	2301      	movs	r3, #1
 8005862:	e7f0      	b.n	8005846 <_vfiprintf_r+0x1da>
 8005864:	ab03      	add	r3, sp, #12
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	462a      	mov	r2, r5
 800586a:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <_vfiprintf_r+0x258>)
 800586c:	a904      	add	r1, sp, #16
 800586e:	4630      	mov	r0, r6
 8005870:	f3af 8000 	nop.w
 8005874:	4607      	mov	r7, r0
 8005876:	1c78      	adds	r0, r7, #1
 8005878:	d1d6      	bne.n	8005828 <_vfiprintf_r+0x1bc>
 800587a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800587c:	07d9      	lsls	r1, r3, #31
 800587e:	d405      	bmi.n	800588c <_vfiprintf_r+0x220>
 8005880:	89ab      	ldrh	r3, [r5, #12]
 8005882:	059a      	lsls	r2, r3, #22
 8005884:	d402      	bmi.n	800588c <_vfiprintf_r+0x220>
 8005886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005888:	f7ff fdbe 	bl	8005408 <__retarget_lock_release_recursive>
 800588c:	89ab      	ldrh	r3, [r5, #12]
 800588e:	065b      	lsls	r3, r3, #25
 8005890:	f53f af12 	bmi.w	80056b8 <_vfiprintf_r+0x4c>
 8005894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005896:	e711      	b.n	80056bc <_vfiprintf_r+0x50>
 8005898:	ab03      	add	r3, sp, #12
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	462a      	mov	r2, r5
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <_vfiprintf_r+0x258>)
 80058a0:	a904      	add	r1, sp, #16
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 f880 	bl	80059a8 <_printf_i>
 80058a8:	e7e4      	b.n	8005874 <_vfiprintf_r+0x208>
 80058aa:	bf00      	nop
 80058ac:	08007148 	.word	0x08007148
 80058b0:	08007168 	.word	0x08007168
 80058b4:	08007128 	.word	0x08007128
 80058b8:	080070f4 	.word	0x080070f4
 80058bc:	080070fe 	.word	0x080070fe
 80058c0:	00000000 	.word	0x00000000
 80058c4:	08005647 	.word	0x08005647
 80058c8:	080070fa 	.word	0x080070fa

080058cc <_printf_common>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	4616      	mov	r6, r2
 80058d2:	4699      	mov	r9, r3
 80058d4:	688a      	ldr	r2, [r1, #8]
 80058d6:	690b      	ldr	r3, [r1, #16]
 80058d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058dc:	4293      	cmp	r3, r2
 80058de:	bfb8      	it	lt
 80058e0:	4613      	movlt	r3, r2
 80058e2:	6033      	str	r3, [r6, #0]
 80058e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058e8:	4607      	mov	r7, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	b10a      	cbz	r2, 80058f2 <_printf_common+0x26>
 80058ee:	3301      	adds	r3, #1
 80058f0:	6033      	str	r3, [r6, #0]
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	0699      	lsls	r1, r3, #26
 80058f6:	bf42      	ittt	mi
 80058f8:	6833      	ldrmi	r3, [r6, #0]
 80058fa:	3302      	addmi	r3, #2
 80058fc:	6033      	strmi	r3, [r6, #0]
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	f015 0506 	ands.w	r5, r5, #6
 8005904:	d106      	bne.n	8005914 <_printf_common+0x48>
 8005906:	f104 0a19 	add.w	sl, r4, #25
 800590a:	68e3      	ldr	r3, [r4, #12]
 800590c:	6832      	ldr	r2, [r6, #0]
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	42ab      	cmp	r3, r5
 8005912:	dc26      	bgt.n	8005962 <_printf_common+0x96>
 8005914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005918:	1e13      	subs	r3, r2, #0
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	bf18      	it	ne
 800591e:	2301      	movne	r3, #1
 8005920:	0692      	lsls	r2, r2, #26
 8005922:	d42b      	bmi.n	800597c <_printf_common+0xb0>
 8005924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005928:	4649      	mov	r1, r9
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	3001      	adds	r0, #1
 8005930:	d01e      	beq.n	8005970 <_printf_common+0xa4>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	68e5      	ldr	r5, [r4, #12]
 8005936:	6832      	ldr	r2, [r6, #0]
 8005938:	f003 0306 	and.w	r3, r3, #6
 800593c:	2b04      	cmp	r3, #4
 800593e:	bf08      	it	eq
 8005940:	1aad      	subeq	r5, r5, r2
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	bf0c      	ite	eq
 8005948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800594c:	2500      	movne	r5, #0
 800594e:	4293      	cmp	r3, r2
 8005950:	bfc4      	itt	gt
 8005952:	1a9b      	subgt	r3, r3, r2
 8005954:	18ed      	addgt	r5, r5, r3
 8005956:	2600      	movs	r6, #0
 8005958:	341a      	adds	r4, #26
 800595a:	42b5      	cmp	r5, r6
 800595c:	d11a      	bne.n	8005994 <_printf_common+0xc8>
 800595e:	2000      	movs	r0, #0
 8005960:	e008      	b.n	8005974 <_printf_common+0xa8>
 8005962:	2301      	movs	r3, #1
 8005964:	4652      	mov	r2, sl
 8005966:	4649      	mov	r1, r9
 8005968:	4638      	mov	r0, r7
 800596a:	47c0      	blx	r8
 800596c:	3001      	adds	r0, #1
 800596e:	d103      	bne.n	8005978 <_printf_common+0xac>
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005978:	3501      	adds	r5, #1
 800597a:	e7c6      	b.n	800590a <_printf_common+0x3e>
 800597c:	18e1      	adds	r1, r4, r3
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	2030      	movs	r0, #48	; 0x30
 8005982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005986:	4422      	add	r2, r4
 8005988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800598c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005990:	3302      	adds	r3, #2
 8005992:	e7c7      	b.n	8005924 <_printf_common+0x58>
 8005994:	2301      	movs	r3, #1
 8005996:	4622      	mov	r2, r4
 8005998:	4649      	mov	r1, r9
 800599a:	4638      	mov	r0, r7
 800599c:	47c0      	blx	r8
 800599e:	3001      	adds	r0, #1
 80059a0:	d0e6      	beq.n	8005970 <_printf_common+0xa4>
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7d9      	b.n	800595a <_printf_common+0x8e>
	...

080059a8 <_printf_i>:
 80059a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	7e0f      	ldrb	r7, [r1, #24]
 80059ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059b0:	2f78      	cmp	r7, #120	; 0x78
 80059b2:	4691      	mov	r9, r2
 80059b4:	4680      	mov	r8, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	469a      	mov	sl, r3
 80059ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059be:	d807      	bhi.n	80059d0 <_printf_i+0x28>
 80059c0:	2f62      	cmp	r7, #98	; 0x62
 80059c2:	d80a      	bhi.n	80059da <_printf_i+0x32>
 80059c4:	2f00      	cmp	r7, #0
 80059c6:	f000 80d8 	beq.w	8005b7a <_printf_i+0x1d2>
 80059ca:	2f58      	cmp	r7, #88	; 0x58
 80059cc:	f000 80a3 	beq.w	8005b16 <_printf_i+0x16e>
 80059d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059d8:	e03a      	b.n	8005a50 <_printf_i+0xa8>
 80059da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059de:	2b15      	cmp	r3, #21
 80059e0:	d8f6      	bhi.n	80059d0 <_printf_i+0x28>
 80059e2:	a101      	add	r1, pc, #4	; (adr r1, 80059e8 <_printf_i+0x40>)
 80059e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a55 	.word	0x08005a55
 80059f0:	080059d1 	.word	0x080059d1
 80059f4:	080059d1 	.word	0x080059d1
 80059f8:	080059d1 	.word	0x080059d1
 80059fc:	080059d1 	.word	0x080059d1
 8005a00:	08005a55 	.word	0x08005a55
 8005a04:	080059d1 	.word	0x080059d1
 8005a08:	080059d1 	.word	0x080059d1
 8005a0c:	080059d1 	.word	0x080059d1
 8005a10:	080059d1 	.word	0x080059d1
 8005a14:	08005b61 	.word	0x08005b61
 8005a18:	08005a85 	.word	0x08005a85
 8005a1c:	08005b43 	.word	0x08005b43
 8005a20:	080059d1 	.word	0x080059d1
 8005a24:	080059d1 	.word	0x080059d1
 8005a28:	08005b83 	.word	0x08005b83
 8005a2c:	080059d1 	.word	0x080059d1
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	080059d1 	.word	0x080059d1
 8005a38:	080059d1 	.word	0x080059d1
 8005a3c:	08005b4b 	.word	0x08005b4b
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	1d1a      	adds	r2, r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	602a      	str	r2, [r5, #0]
 8005a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0a3      	b.n	8005b9c <_printf_i+0x1f4>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	6829      	ldr	r1, [r5, #0]
 8005a58:	0606      	lsls	r6, r0, #24
 8005a5a:	f101 0304 	add.w	r3, r1, #4
 8005a5e:	d50a      	bpl.n	8005a76 <_printf_i+0xce>
 8005a60:	680e      	ldr	r6, [r1, #0]
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	da03      	bge.n	8005a70 <_printf_i+0xc8>
 8005a68:	232d      	movs	r3, #45	; 0x2d
 8005a6a:	4276      	negs	r6, r6
 8005a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a70:	485e      	ldr	r0, [pc, #376]	; (8005bec <_printf_i+0x244>)
 8005a72:	230a      	movs	r3, #10
 8005a74:	e019      	b.n	8005aaa <_printf_i+0x102>
 8005a76:	680e      	ldr	r6, [r1, #0]
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a7e:	bf18      	it	ne
 8005a80:	b236      	sxthne	r6, r6
 8005a82:	e7ef      	b.n	8005a64 <_printf_i+0xbc>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	1d19      	adds	r1, r3, #4
 8005a8a:	6029      	str	r1, [r5, #0]
 8005a8c:	0601      	lsls	r1, r0, #24
 8005a8e:	d501      	bpl.n	8005a94 <_printf_i+0xec>
 8005a90:	681e      	ldr	r6, [r3, #0]
 8005a92:	e002      	b.n	8005a9a <_printf_i+0xf2>
 8005a94:	0646      	lsls	r6, r0, #25
 8005a96:	d5fb      	bpl.n	8005a90 <_printf_i+0xe8>
 8005a98:	881e      	ldrh	r6, [r3, #0]
 8005a9a:	4854      	ldr	r0, [pc, #336]	; (8005bec <_printf_i+0x244>)
 8005a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2308      	moveq	r3, #8
 8005aa2:	230a      	movne	r3, #10
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aaa:	6865      	ldr	r5, [r4, #4]
 8005aac:	60a5      	str	r5, [r4, #8]
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	bfa2      	ittt	ge
 8005ab2:	6821      	ldrge	r1, [r4, #0]
 8005ab4:	f021 0104 	bicge.w	r1, r1, #4
 8005ab8:	6021      	strge	r1, [r4, #0]
 8005aba:	b90e      	cbnz	r6, 8005ac0 <_printf_i+0x118>
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	d04d      	beq.n	8005b5c <_printf_i+0x1b4>
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8005aca:	5dc7      	ldrb	r7, [r0, r7]
 8005acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ad0:	4637      	mov	r7, r6
 8005ad2:	42bb      	cmp	r3, r7
 8005ad4:	460e      	mov	r6, r1
 8005ad6:	d9f4      	bls.n	8005ac2 <_printf_i+0x11a>
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d10b      	bne.n	8005af4 <_printf_i+0x14c>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	07de      	lsls	r6, r3, #31
 8005ae0:	d508      	bpl.n	8005af4 <_printf_i+0x14c>
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6861      	ldr	r1, [r4, #4]
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	bfde      	ittt	le
 8005aea:	2330      	movle	r3, #48	; 0x30
 8005aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005af0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005af4:	1b52      	subs	r2, r2, r5
 8005af6:	6122      	str	r2, [r4, #16]
 8005af8:	f8cd a000 	str.w	sl, [sp]
 8005afc:	464b      	mov	r3, r9
 8005afe:	aa03      	add	r2, sp, #12
 8005b00:	4621      	mov	r1, r4
 8005b02:	4640      	mov	r0, r8
 8005b04:	f7ff fee2 	bl	80058cc <_printf_common>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d14c      	bne.n	8005ba6 <_printf_i+0x1fe>
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b10:	b004      	add	sp, #16
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	4835      	ldr	r0, [pc, #212]	; (8005bec <_printf_i+0x244>)
 8005b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b1c:	6829      	ldr	r1, [r5, #0]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b24:	6029      	str	r1, [r5, #0]
 8005b26:	061d      	lsls	r5, r3, #24
 8005b28:	d514      	bpl.n	8005b54 <_printf_i+0x1ac>
 8005b2a:	07df      	lsls	r7, r3, #31
 8005b2c:	bf44      	itt	mi
 8005b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b32:	6023      	strmi	r3, [r4, #0]
 8005b34:	b91e      	cbnz	r6, 8005b3e <_printf_i+0x196>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	f023 0320 	bic.w	r3, r3, #32
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	2310      	movs	r3, #16
 8005b40:	e7b0      	b.n	8005aa4 <_printf_i+0xfc>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	f043 0320 	orr.w	r3, r3, #32
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	2378      	movs	r3, #120	; 0x78
 8005b4c:	4828      	ldr	r0, [pc, #160]	; (8005bf0 <_printf_i+0x248>)
 8005b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b52:	e7e3      	b.n	8005b1c <_printf_i+0x174>
 8005b54:	0659      	lsls	r1, r3, #25
 8005b56:	bf48      	it	mi
 8005b58:	b2b6      	uxthmi	r6, r6
 8005b5a:	e7e6      	b.n	8005b2a <_printf_i+0x182>
 8005b5c:	4615      	mov	r5, r2
 8005b5e:	e7bb      	b.n	8005ad8 <_printf_i+0x130>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	6826      	ldr	r6, [r4, #0]
 8005b64:	6961      	ldr	r1, [r4, #20]
 8005b66:	1d18      	adds	r0, r3, #4
 8005b68:	6028      	str	r0, [r5, #0]
 8005b6a:	0635      	lsls	r5, r6, #24
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	d501      	bpl.n	8005b74 <_printf_i+0x1cc>
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	e002      	b.n	8005b7a <_printf_i+0x1d2>
 8005b74:	0670      	lsls	r0, r6, #25
 8005b76:	d5fb      	bpl.n	8005b70 <_printf_i+0x1c8>
 8005b78:	8019      	strh	r1, [r3, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	4615      	mov	r5, r2
 8005b80:	e7ba      	b.n	8005af8 <_printf_i+0x150>
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	602a      	str	r2, [r5, #0]
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f7fa fb36 	bl	8000200 <memchr>
 8005b94:	b108      	cbz	r0, 8005b9a <_printf_i+0x1f2>
 8005b96:	1b40      	subs	r0, r0, r5
 8005b98:	6060      	str	r0, [r4, #4]
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	e7a8      	b.n	8005af8 <_printf_i+0x150>
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4649      	mov	r1, r9
 8005bac:	4640      	mov	r0, r8
 8005bae:	47d0      	blx	sl
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d0ab      	beq.n	8005b0c <_printf_i+0x164>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	079b      	lsls	r3, r3, #30
 8005bb8:	d413      	bmi.n	8005be2 <_printf_i+0x23a>
 8005bba:	68e0      	ldr	r0, [r4, #12]
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	4298      	cmp	r0, r3
 8005bc0:	bfb8      	it	lt
 8005bc2:	4618      	movlt	r0, r3
 8005bc4:	e7a4      	b.n	8005b10 <_printf_i+0x168>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4632      	mov	r2, r6
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	47d0      	blx	sl
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d09b      	beq.n	8005b0c <_printf_i+0x164>
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	9903      	ldr	r1, [sp, #12]
 8005bda:	1a5b      	subs	r3, r3, r1
 8005bdc:	42ab      	cmp	r3, r5
 8005bde:	dcf2      	bgt.n	8005bc6 <_printf_i+0x21e>
 8005be0:	e7eb      	b.n	8005bba <_printf_i+0x212>
 8005be2:	2500      	movs	r5, #0
 8005be4:	f104 0619 	add.w	r6, r4, #25
 8005be8:	e7f5      	b.n	8005bd6 <_printf_i+0x22e>
 8005bea:	bf00      	nop
 8005bec:	08007105 	.word	0x08007105
 8005bf0:	08007116 	.word	0x08007116

08005bf4 <iprintf>:
 8005bf4:	b40f      	push	{r0, r1, r2, r3}
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <iprintf+0x2c>)
 8005bf8:	b513      	push	{r0, r1, r4, lr}
 8005bfa:	681c      	ldr	r4, [r3, #0]
 8005bfc:	b124      	cbz	r4, 8005c08 <iprintf+0x14>
 8005bfe:	69a3      	ldr	r3, [r4, #24]
 8005c00:	b913      	cbnz	r3, 8005c08 <iprintf+0x14>
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 fb30 	bl	8006268 <__sinit>
 8005c08:	ab05      	add	r3, sp, #20
 8005c0a:	9a04      	ldr	r2, [sp, #16]
 8005c0c:	68a1      	ldr	r1, [r4, #8]
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7ff fd2b 	bl	800566c <_vfiprintf_r>
 8005c16:	b002      	add	sp, #8
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	b004      	add	sp, #16
 8005c1e:	4770      	bx	lr
 8005c20:	200001a4 	.word	0x200001a4

08005c24 <_puts_r>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	460e      	mov	r6, r1
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b118      	cbz	r0, 8005c34 <_puts_r+0x10>
 8005c2c:	6983      	ldr	r3, [r0, #24]
 8005c2e:	b90b      	cbnz	r3, 8005c34 <_puts_r+0x10>
 8005c30:	f000 fb1a 	bl	8006268 <__sinit>
 8005c34:	69ab      	ldr	r3, [r5, #24]
 8005c36:	68ac      	ldr	r4, [r5, #8]
 8005c38:	b913      	cbnz	r3, 8005c40 <_puts_r+0x1c>
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 fb14 	bl	8006268 <__sinit>
 8005c40:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <_puts_r+0xd0>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d120      	bne.n	8005c88 <_puts_r+0x64>
 8005c46:	686c      	ldr	r4, [r5, #4]
 8005c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c4a:	07db      	lsls	r3, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_puts_r+0x36>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	0598      	lsls	r0, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_puts_r+0x36>
 8005c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c56:	f7ff fbd6 	bl	8005406 <__retarget_lock_acquire_recursive>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	0719      	lsls	r1, r3, #28
 8005c5e:	d51d      	bpl.n	8005c9c <_puts_r+0x78>
 8005c60:	6923      	ldr	r3, [r4, #16]
 8005c62:	b1db      	cbz	r3, 8005c9c <_puts_r+0x78>
 8005c64:	3e01      	subs	r6, #1
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	bb39      	cbnz	r1, 8005cc2 <_puts_r+0x9e>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da38      	bge.n	8005ce8 <_puts_r+0xc4>
 8005c76:	4622      	mov	r2, r4
 8005c78:	210a      	movs	r1, #10
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f91a 	bl	8005eb4 <__swbuf_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d011      	beq.n	8005ca8 <_puts_r+0x84>
 8005c84:	250a      	movs	r5, #10
 8005c86:	e011      	b.n	8005cac <_puts_r+0x88>
 8005c88:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <_puts_r+0xd4>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d101      	bne.n	8005c92 <_puts_r+0x6e>
 8005c8e:	68ac      	ldr	r4, [r5, #8]
 8005c90:	e7da      	b.n	8005c48 <_puts_r+0x24>
 8005c92:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <_puts_r+0xd8>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf08      	it	eq
 8005c98:	68ec      	ldreq	r4, [r5, #12]
 8005c9a:	e7d5      	b.n	8005c48 <_puts_r+0x24>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 f95a 	bl	8005f58 <__swsetup_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d0dd      	beq.n	8005c64 <_puts_r+0x40>
 8005ca8:	f04f 35ff 	mov.w	r5, #4294967295
 8005cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cae:	07da      	lsls	r2, r3, #31
 8005cb0:	d405      	bmi.n	8005cbe <_puts_r+0x9a>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	059b      	lsls	r3, r3, #22
 8005cb6:	d402      	bmi.n	8005cbe <_puts_r+0x9a>
 8005cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cba:	f7ff fba5 	bl	8005408 <__retarget_lock_release_recursive>
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da04      	bge.n	8005cd0 <_puts_r+0xac>
 8005cc6:	69a2      	ldr	r2, [r4, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	dc06      	bgt.n	8005cda <_puts_r+0xb6>
 8005ccc:	290a      	cmp	r1, #10
 8005cce:	d004      	beq.n	8005cda <_puts_r+0xb6>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	6022      	str	r2, [r4, #0]
 8005cd6:	7019      	strb	r1, [r3, #0]
 8005cd8:	e7c5      	b.n	8005c66 <_puts_r+0x42>
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f8e9 	bl	8005eb4 <__swbuf_r>
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d1bf      	bne.n	8005c66 <_puts_r+0x42>
 8005ce6:	e7df      	b.n	8005ca8 <_puts_r+0x84>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	250a      	movs	r5, #10
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	701d      	strb	r5, [r3, #0]
 8005cf2:	e7db      	b.n	8005cac <_puts_r+0x88>
 8005cf4:	08007148 	.word	0x08007148
 8005cf8:	08007168 	.word	0x08007168
 8005cfc:	08007128 	.word	0x08007128

08005d00 <puts>:
 8005d00:	4b02      	ldr	r3, [pc, #8]	; (8005d0c <puts+0xc>)
 8005d02:	4601      	mov	r1, r0
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	f7ff bf8d 	b.w	8005c24 <_puts_r>
 8005d0a:	bf00      	nop
 8005d0c:	200001a4 	.word	0x200001a4

08005d10 <_sbrk_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	; (8005d2c <_sbrk_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fc fd32 	bl	8002784 <_sbrk>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_sbrk_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_sbrk_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	200006d4 	.word	0x200006d4

08005d30 <strchr>:
 8005d30:	b2c9      	uxtb	r1, r1
 8005d32:	4603      	mov	r3, r0
 8005d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d38:	b11a      	cbz	r2, 8005d42 <strchr+0x12>
 8005d3a:	428a      	cmp	r2, r1
 8005d3c:	d1f9      	bne.n	8005d32 <strchr+0x2>
 8005d3e:	4618      	mov	r0, r3
 8005d40:	4770      	bx	lr
 8005d42:	2900      	cmp	r1, #0
 8005d44:	bf18      	it	ne
 8005d46:	2300      	movne	r3, #0
 8005d48:	e7f9      	b.n	8005d3e <strchr+0xe>

08005d4a <strncmp>:
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	b17a      	cbz	r2, 8005d6e <strncmp+0x24>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	3901      	subs	r1, #1
 8005d52:	1884      	adds	r4, r0, r2
 8005d54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005d5c:	4290      	cmp	r0, r2
 8005d5e:	d101      	bne.n	8005d64 <strncmp+0x1a>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d101      	bne.n	8005d68 <strncmp+0x1e>
 8005d64:	1a80      	subs	r0, r0, r2
 8005d66:	bd10      	pop	{r4, pc}
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1f3      	bne.n	8005d54 <strncmp+0xa>
 8005d6c:	e7fa      	b.n	8005d64 <strncmp+0x1a>
 8005d6e:	4610      	mov	r0, r2
 8005d70:	e7f9      	b.n	8005d66 <strncmp+0x1c>
	...

08005d74 <_strtoll_l.constprop.0>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	4688      	mov	r8, r1
 8005d7c:	9201      	str	r2, [sp, #4]
 8005d7e:	4a47      	ldr	r2, [pc, #284]	; (8005e9c <_strtoll_l.constprop.0+0x128>)
 8005d80:	9003      	str	r0, [sp, #12]
 8005d82:	461e      	mov	r6, r3
 8005d84:	460d      	mov	r5, r1
 8005d86:	462b      	mov	r3, r5
 8005d88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d8c:	5ca7      	ldrb	r7, [r4, r2]
 8005d8e:	f017 0708 	ands.w	r7, r7, #8
 8005d92:	d1f8      	bne.n	8005d86 <_strtoll_l.constprop.0+0x12>
 8005d94:	2c2d      	cmp	r4, #45	; 0x2d
 8005d96:	d147      	bne.n	8005e28 <_strtoll_l.constprop.0+0xb4>
 8005d98:	782c      	ldrb	r4, [r5, #0]
 8005d9a:	2701      	movs	r7, #1
 8005d9c:	1c9d      	adds	r5, r3, #2
 8005d9e:	2e00      	cmp	r6, #0
 8005da0:	d077      	beq.n	8005e92 <_strtoll_l.constprop.0+0x11e>
 8005da2:	2e10      	cmp	r6, #16
 8005da4:	d109      	bne.n	8005dba <_strtoll_l.constprop.0+0x46>
 8005da6:	2c30      	cmp	r4, #48	; 0x30
 8005da8:	d107      	bne.n	8005dba <_strtoll_l.constprop.0+0x46>
 8005daa:	782b      	ldrb	r3, [r5, #0]
 8005dac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005db0:	2b58      	cmp	r3, #88	; 0x58
 8005db2:	d169      	bne.n	8005e88 <_strtoll_l.constprop.0+0x114>
 8005db4:	786c      	ldrb	r4, [r5, #1]
 8005db6:	2610      	movs	r6, #16
 8005db8:	3502      	adds	r5, #2
 8005dba:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 8005dbe:	f107 3bff 	add.w	fp, r7, #4294967295
 8005dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dc6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8005dca:	4632      	mov	r2, r6
 8005dcc:	464b      	mov	r3, r9
 8005dce:	4658      	mov	r0, fp
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	f7fa fab5 	bl	8000340 <__aeabi_uldivmod>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9202      	str	r2, [sp, #8]
 8005dda:	468c      	mov	ip, r1
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4619      	mov	r1, r3
 8005de0:	4618      	mov	r0, r3
 8005de2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005de6:	f1be 0f09 	cmp.w	lr, #9
 8005dea:	d822      	bhi.n	8005e32 <_strtoll_l.constprop.0+0xbe>
 8005dec:	4674      	mov	r4, lr
 8005dee:	42a6      	cmp	r6, r4
 8005df0:	dd30      	ble.n	8005e54 <_strtoll_l.constprop.0+0xe0>
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d014      	beq.n	8005e22 <_strtoll_l.constprop.0+0xae>
 8005df8:	4282      	cmp	r2, r0
 8005dfa:	eb7c 0301 	sbcs.w	r3, ip, r1
 8005dfe:	d326      	bcc.n	8005e4e <_strtoll_l.constprop.0+0xda>
 8005e00:	458c      	cmp	ip, r1
 8005e02:	bf08      	it	eq
 8005e04:	4282      	cmpeq	r2, r0
 8005e06:	d102      	bne.n	8005e0e <_strtoll_l.constprop.0+0x9a>
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	db1f      	blt.n	8005e4e <_strtoll_l.constprop.0+0xda>
 8005e0e:	4371      	muls	r1, r6
 8005e10:	fb00 1109 	mla	r1, r0, r9, r1
 8005e14:	fba6 0300 	umull	r0, r3, r6, r0
 8005e18:	4419      	add	r1, r3
 8005e1a:	1820      	adds	r0, r4, r0
 8005e1c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8005e20:	2301      	movs	r3, #1
 8005e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e26:	e7dc      	b.n	8005de2 <_strtoll_l.constprop.0+0x6e>
 8005e28:	2c2b      	cmp	r4, #43	; 0x2b
 8005e2a:	bf04      	itt	eq
 8005e2c:	782c      	ldrbeq	r4, [r5, #0]
 8005e2e:	1c9d      	addeq	r5, r3, #2
 8005e30:	e7b5      	b.n	8005d9e <_strtoll_l.constprop.0+0x2a>
 8005e32:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005e36:	f1be 0f19 	cmp.w	lr, #25
 8005e3a:	d801      	bhi.n	8005e40 <_strtoll_l.constprop.0+0xcc>
 8005e3c:	3c37      	subs	r4, #55	; 0x37
 8005e3e:	e7d6      	b.n	8005dee <_strtoll_l.constprop.0+0x7a>
 8005e40:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005e44:	f1be 0f19 	cmp.w	lr, #25
 8005e48:	d804      	bhi.n	8005e54 <_strtoll_l.constprop.0+0xe0>
 8005e4a:	3c57      	subs	r4, #87	; 0x57
 8005e4c:	e7cf      	b.n	8005dee <_strtoll_l.constprop.0+0x7a>
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	e7e6      	b.n	8005e22 <_strtoll_l.constprop.0+0xae>
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	d109      	bne.n	8005e6c <_strtoll_l.constprop.0+0xf8>
 8005e58:	9a03      	ldr	r2, [sp, #12]
 8005e5a:	2322      	movs	r3, #34	; 0x22
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	4658      	mov	r0, fp
 8005e62:	4651      	mov	r1, sl
 8005e64:	b953      	cbnz	r3, 8005e7c <_strtoll_l.constprop.0+0x108>
 8005e66:	b005      	add	sp, #20
 8005e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	b117      	cbz	r7, 8005e74 <_strtoll_l.constprop.0+0x100>
 8005e6e:	4240      	negs	r0, r0
 8005e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e74:	9a01      	ldr	r2, [sp, #4]
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d0f5      	beq.n	8005e66 <_strtoll_l.constprop.0+0xf2>
 8005e7a:	b10b      	cbz	r3, 8005e80 <_strtoll_l.constprop.0+0x10c>
 8005e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	f8c3 8000 	str.w	r8, [r3]
 8005e86:	e7ee      	b.n	8005e66 <_strtoll_l.constprop.0+0xf2>
 8005e88:	2430      	movs	r4, #48	; 0x30
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	d195      	bne.n	8005dba <_strtoll_l.constprop.0+0x46>
 8005e8e:	2608      	movs	r6, #8
 8005e90:	e793      	b.n	8005dba <_strtoll_l.constprop.0+0x46>
 8005e92:	2c30      	cmp	r4, #48	; 0x30
 8005e94:	d089      	beq.n	8005daa <_strtoll_l.constprop.0+0x36>
 8005e96:	260a      	movs	r6, #10
 8005e98:	e78f      	b.n	8005dba <_strtoll_l.constprop.0+0x46>
 8005e9a:	bf00      	nop
 8005e9c:	08006fed 	.word	0x08006fed

08005ea0 <strtoll>:
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	4601      	mov	r1, r0
 8005ea6:	4802      	ldr	r0, [pc, #8]	; (8005eb0 <strtoll+0x10>)
 8005ea8:	6800      	ldr	r0, [r0, #0]
 8005eaa:	f7ff bf63 	b.w	8005d74 <_strtoll_l.constprop.0>
 8005eae:	bf00      	nop
 8005eb0:	200001a4 	.word	0x200001a4

08005eb4 <__swbuf_r>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	460e      	mov	r6, r1
 8005eb8:	4614      	mov	r4, r2
 8005eba:	4605      	mov	r5, r0
 8005ebc:	b118      	cbz	r0, 8005ec6 <__swbuf_r+0x12>
 8005ebe:	6983      	ldr	r3, [r0, #24]
 8005ec0:	b90b      	cbnz	r3, 8005ec6 <__swbuf_r+0x12>
 8005ec2:	f000 f9d1 	bl	8006268 <__sinit>
 8005ec6:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <__swbuf_r+0x98>)
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	d12b      	bne.n	8005f24 <__swbuf_r+0x70>
 8005ecc:	686c      	ldr	r4, [r5, #4]
 8005ece:	69a3      	ldr	r3, [r4, #24]
 8005ed0:	60a3      	str	r3, [r4, #8]
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	071a      	lsls	r2, r3, #28
 8005ed6:	d52f      	bpl.n	8005f38 <__swbuf_r+0x84>
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	b36b      	cbz	r3, 8005f38 <__swbuf_r+0x84>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	6820      	ldr	r0, [r4, #0]
 8005ee0:	1ac0      	subs	r0, r0, r3
 8005ee2:	6963      	ldr	r3, [r4, #20]
 8005ee4:	b2f6      	uxtb	r6, r6
 8005ee6:	4283      	cmp	r3, r0
 8005ee8:	4637      	mov	r7, r6
 8005eea:	dc04      	bgt.n	8005ef6 <__swbuf_r+0x42>
 8005eec:	4621      	mov	r1, r4
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f000 f926 	bl	8006140 <_fflush_r>
 8005ef4:	bb30      	cbnz	r0, 8005f44 <__swbuf_r+0x90>
 8005ef6:	68a3      	ldr	r3, [r4, #8]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	701e      	strb	r6, [r3, #0]
 8005f04:	6963      	ldr	r3, [r4, #20]
 8005f06:	3001      	adds	r0, #1
 8005f08:	4283      	cmp	r3, r0
 8005f0a:	d004      	beq.n	8005f16 <__swbuf_r+0x62>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	07db      	lsls	r3, r3, #31
 8005f10:	d506      	bpl.n	8005f20 <__swbuf_r+0x6c>
 8005f12:	2e0a      	cmp	r6, #10
 8005f14:	d104      	bne.n	8005f20 <__swbuf_r+0x6c>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f911 	bl	8006140 <_fflush_r>
 8005f1e:	b988      	cbnz	r0, 8005f44 <__swbuf_r+0x90>
 8005f20:	4638      	mov	r0, r7
 8005f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f24:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <__swbuf_r+0x9c>)
 8005f26:	429c      	cmp	r4, r3
 8005f28:	d101      	bne.n	8005f2e <__swbuf_r+0x7a>
 8005f2a:	68ac      	ldr	r4, [r5, #8]
 8005f2c:	e7cf      	b.n	8005ece <__swbuf_r+0x1a>
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <__swbuf_r+0xa0>)
 8005f30:	429c      	cmp	r4, r3
 8005f32:	bf08      	it	eq
 8005f34:	68ec      	ldreq	r4, [r5, #12]
 8005f36:	e7ca      	b.n	8005ece <__swbuf_r+0x1a>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f80c 	bl	8005f58 <__swsetup_r>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d0cb      	beq.n	8005edc <__swbuf_r+0x28>
 8005f44:	f04f 37ff 	mov.w	r7, #4294967295
 8005f48:	e7ea      	b.n	8005f20 <__swbuf_r+0x6c>
 8005f4a:	bf00      	nop
 8005f4c:	08007148 	.word	0x08007148
 8005f50:	08007168 	.word	0x08007168
 8005f54:	08007128 	.word	0x08007128

08005f58 <__swsetup_r>:
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <__swsetup_r+0xcc>)
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	b125      	cbz	r5, 8005f6e <__swsetup_r+0x16>
 8005f64:	69ab      	ldr	r3, [r5, #24]
 8005f66:	b913      	cbnz	r3, 8005f6e <__swsetup_r+0x16>
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f97d 	bl	8006268 <__sinit>
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <__swsetup_r+0xd0>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d10f      	bne.n	8005f94 <__swsetup_r+0x3c>
 8005f74:	686c      	ldr	r4, [r5, #4]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f7c:	0719      	lsls	r1, r3, #28
 8005f7e:	d42c      	bmi.n	8005fda <__swsetup_r+0x82>
 8005f80:	06dd      	lsls	r5, r3, #27
 8005f82:	d411      	bmi.n	8005fa8 <__swsetup_r+0x50>
 8005f84:	2309      	movs	r3, #9
 8005f86:	6033      	str	r3, [r6, #0]
 8005f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	e03e      	b.n	8006012 <__swsetup_r+0xba>
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <__swsetup_r+0xd4>)
 8005f96:	429c      	cmp	r4, r3
 8005f98:	d101      	bne.n	8005f9e <__swsetup_r+0x46>
 8005f9a:	68ac      	ldr	r4, [r5, #8]
 8005f9c:	e7eb      	b.n	8005f76 <__swsetup_r+0x1e>
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <__swsetup_r+0xd8>)
 8005fa0:	429c      	cmp	r4, r3
 8005fa2:	bf08      	it	eq
 8005fa4:	68ec      	ldreq	r4, [r5, #12]
 8005fa6:	e7e6      	b.n	8005f76 <__swsetup_r+0x1e>
 8005fa8:	0758      	lsls	r0, r3, #29
 8005faa:	d512      	bpl.n	8005fd2 <__swsetup_r+0x7a>
 8005fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fae:	b141      	cbz	r1, 8005fc2 <__swsetup_r+0x6a>
 8005fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	d002      	beq.n	8005fbe <__swsetup_r+0x66>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff fa4d 	bl	8005458 <_free_r>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	b94b      	cbnz	r3, 8005ff2 <__swsetup_r+0x9a>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe8:	d003      	beq.n	8005ff2 <__swsetup_r+0x9a>
 8005fea:	4621      	mov	r1, r4
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 f9fd 	bl	80063ec <__smakebuf_r>
 8005ff2:	89a0      	ldrh	r0, [r4, #12]
 8005ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff8:	f010 0301 	ands.w	r3, r0, #1
 8005ffc:	d00a      	beq.n	8006014 <__swsetup_r+0xbc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	60a3      	str	r3, [r4, #8]
 8006002:	6963      	ldr	r3, [r4, #20]
 8006004:	425b      	negs	r3, r3
 8006006:	61a3      	str	r3, [r4, #24]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	b943      	cbnz	r3, 800601e <__swsetup_r+0xc6>
 800600c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006010:	d1ba      	bne.n	8005f88 <__swsetup_r+0x30>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	0781      	lsls	r1, r0, #30
 8006016:	bf58      	it	pl
 8006018:	6963      	ldrpl	r3, [r4, #20]
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	e7f4      	b.n	8006008 <__swsetup_r+0xb0>
 800601e:	2000      	movs	r0, #0
 8006020:	e7f7      	b.n	8006012 <__swsetup_r+0xba>
 8006022:	bf00      	nop
 8006024:	200001a4 	.word	0x200001a4
 8006028:	08007148 	.word	0x08007148
 800602c:	08007168 	.word	0x08007168
 8006030:	08007128 	.word	0x08007128

08006034 <__sflush_r>:
 8006034:	898a      	ldrh	r2, [r1, #12]
 8006036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603a:	4605      	mov	r5, r0
 800603c:	0710      	lsls	r0, r2, #28
 800603e:	460c      	mov	r4, r1
 8006040:	d458      	bmi.n	80060f4 <__sflush_r+0xc0>
 8006042:	684b      	ldr	r3, [r1, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	dc05      	bgt.n	8006054 <__sflush_r+0x20>
 8006048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	dc02      	bgt.n	8006054 <__sflush_r+0x20>
 800604e:	2000      	movs	r0, #0
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006056:	2e00      	cmp	r6, #0
 8006058:	d0f9      	beq.n	800604e <__sflush_r+0x1a>
 800605a:	2300      	movs	r3, #0
 800605c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006060:	682f      	ldr	r7, [r5, #0]
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	d032      	beq.n	80060cc <__sflush_r+0x98>
 8006066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	075a      	lsls	r2, r3, #29
 800606c:	d505      	bpl.n	800607a <__sflush_r+0x46>
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	1ac0      	subs	r0, r0, r3
 8006072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006074:	b10b      	cbz	r3, 800607a <__sflush_r+0x46>
 8006076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006078:	1ac0      	subs	r0, r0, r3
 800607a:	2300      	movs	r3, #0
 800607c:	4602      	mov	r2, r0
 800607e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006080:	6a21      	ldr	r1, [r4, #32]
 8006082:	4628      	mov	r0, r5
 8006084:	47b0      	blx	r6
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	d106      	bne.n	800609a <__sflush_r+0x66>
 800608c:	6829      	ldr	r1, [r5, #0]
 800608e:	291d      	cmp	r1, #29
 8006090:	d82c      	bhi.n	80060ec <__sflush_r+0xb8>
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <__sflush_r+0x108>)
 8006094:	40ca      	lsrs	r2, r1
 8006096:	07d6      	lsls	r6, r2, #31
 8006098:	d528      	bpl.n	80060ec <__sflush_r+0xb8>
 800609a:	2200      	movs	r2, #0
 800609c:	6062      	str	r2, [r4, #4]
 800609e:	04d9      	lsls	r1, r3, #19
 80060a0:	6922      	ldr	r2, [r4, #16]
 80060a2:	6022      	str	r2, [r4, #0]
 80060a4:	d504      	bpl.n	80060b0 <__sflush_r+0x7c>
 80060a6:	1c42      	adds	r2, r0, #1
 80060a8:	d101      	bne.n	80060ae <__sflush_r+0x7a>
 80060aa:	682b      	ldr	r3, [r5, #0]
 80060ac:	b903      	cbnz	r3, 80060b0 <__sflush_r+0x7c>
 80060ae:	6560      	str	r0, [r4, #84]	; 0x54
 80060b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b2:	602f      	str	r7, [r5, #0]
 80060b4:	2900      	cmp	r1, #0
 80060b6:	d0ca      	beq.n	800604e <__sflush_r+0x1a>
 80060b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060bc:	4299      	cmp	r1, r3
 80060be:	d002      	beq.n	80060c6 <__sflush_r+0x92>
 80060c0:	4628      	mov	r0, r5
 80060c2:	f7ff f9c9 	bl	8005458 <_free_r>
 80060c6:	2000      	movs	r0, #0
 80060c8:	6360      	str	r0, [r4, #52]	; 0x34
 80060ca:	e7c1      	b.n	8006050 <__sflush_r+0x1c>
 80060cc:	6a21      	ldr	r1, [r4, #32]
 80060ce:	2301      	movs	r3, #1
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b0      	blx	r6
 80060d4:	1c41      	adds	r1, r0, #1
 80060d6:	d1c7      	bne.n	8006068 <__sflush_r+0x34>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0c4      	beq.n	8006068 <__sflush_r+0x34>
 80060de:	2b1d      	cmp	r3, #29
 80060e0:	d001      	beq.n	80060e6 <__sflush_r+0xb2>
 80060e2:	2b16      	cmp	r3, #22
 80060e4:	d101      	bne.n	80060ea <__sflush_r+0xb6>
 80060e6:	602f      	str	r7, [r5, #0]
 80060e8:	e7b1      	b.n	800604e <__sflush_r+0x1a>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	e7ad      	b.n	8006050 <__sflush_r+0x1c>
 80060f4:	690f      	ldr	r7, [r1, #16]
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	d0a9      	beq.n	800604e <__sflush_r+0x1a>
 80060fa:	0793      	lsls	r3, r2, #30
 80060fc:	680e      	ldr	r6, [r1, #0]
 80060fe:	bf08      	it	eq
 8006100:	694b      	ldreq	r3, [r1, #20]
 8006102:	600f      	str	r7, [r1, #0]
 8006104:	bf18      	it	ne
 8006106:	2300      	movne	r3, #0
 8006108:	eba6 0807 	sub.w	r8, r6, r7
 800610c:	608b      	str	r3, [r1, #8]
 800610e:	f1b8 0f00 	cmp.w	r8, #0
 8006112:	dd9c      	ble.n	800604e <__sflush_r+0x1a>
 8006114:	6a21      	ldr	r1, [r4, #32]
 8006116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006118:	4643      	mov	r3, r8
 800611a:	463a      	mov	r2, r7
 800611c:	4628      	mov	r0, r5
 800611e:	47b0      	blx	r6
 8006120:	2800      	cmp	r0, #0
 8006122:	dc06      	bgt.n	8006132 <__sflush_r+0xfe>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	e78e      	b.n	8006050 <__sflush_r+0x1c>
 8006132:	4407      	add	r7, r0
 8006134:	eba8 0800 	sub.w	r8, r8, r0
 8006138:	e7e9      	b.n	800610e <__sflush_r+0xda>
 800613a:	bf00      	nop
 800613c:	20400001 	.word	0x20400001

08006140 <_fflush_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	690b      	ldr	r3, [r1, #16]
 8006144:	4605      	mov	r5, r0
 8006146:	460c      	mov	r4, r1
 8006148:	b913      	cbnz	r3, 8006150 <_fflush_r+0x10>
 800614a:	2500      	movs	r5, #0
 800614c:	4628      	mov	r0, r5
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	b118      	cbz	r0, 800615a <_fflush_r+0x1a>
 8006152:	6983      	ldr	r3, [r0, #24]
 8006154:	b90b      	cbnz	r3, 800615a <_fflush_r+0x1a>
 8006156:	f000 f887 	bl	8006268 <__sinit>
 800615a:	4b14      	ldr	r3, [pc, #80]	; (80061ac <_fflush_r+0x6c>)
 800615c:	429c      	cmp	r4, r3
 800615e:	d11b      	bne.n	8006198 <_fflush_r+0x58>
 8006160:	686c      	ldr	r4, [r5, #4]
 8006162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0ef      	beq.n	800614a <_fflush_r+0xa>
 800616a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800616c:	07d0      	lsls	r0, r2, #31
 800616e:	d404      	bmi.n	800617a <_fflush_r+0x3a>
 8006170:	0599      	lsls	r1, r3, #22
 8006172:	d402      	bmi.n	800617a <_fflush_r+0x3a>
 8006174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006176:	f7ff f946 	bl	8005406 <__retarget_lock_acquire_recursive>
 800617a:	4628      	mov	r0, r5
 800617c:	4621      	mov	r1, r4
 800617e:	f7ff ff59 	bl	8006034 <__sflush_r>
 8006182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006184:	07da      	lsls	r2, r3, #31
 8006186:	4605      	mov	r5, r0
 8006188:	d4e0      	bmi.n	800614c <_fflush_r+0xc>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	059b      	lsls	r3, r3, #22
 800618e:	d4dd      	bmi.n	800614c <_fflush_r+0xc>
 8006190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006192:	f7ff f939 	bl	8005408 <__retarget_lock_release_recursive>
 8006196:	e7d9      	b.n	800614c <_fflush_r+0xc>
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <_fflush_r+0x70>)
 800619a:	429c      	cmp	r4, r3
 800619c:	d101      	bne.n	80061a2 <_fflush_r+0x62>
 800619e:	68ac      	ldr	r4, [r5, #8]
 80061a0:	e7df      	b.n	8006162 <_fflush_r+0x22>
 80061a2:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <_fflush_r+0x74>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	bf08      	it	eq
 80061a8:	68ec      	ldreq	r4, [r5, #12]
 80061aa:	e7da      	b.n	8006162 <_fflush_r+0x22>
 80061ac:	08007148 	.word	0x08007148
 80061b0:	08007168 	.word	0x08007168
 80061b4:	08007128 	.word	0x08007128

080061b8 <std>:
 80061b8:	2300      	movs	r3, #0
 80061ba:	b510      	push	{r4, lr}
 80061bc:	4604      	mov	r4, r0
 80061be:	e9c0 3300 	strd	r3, r3, [r0]
 80061c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c6:	6083      	str	r3, [r0, #8]
 80061c8:	8181      	strh	r1, [r0, #12]
 80061ca:	6643      	str	r3, [r0, #100]	; 0x64
 80061cc:	81c2      	strh	r2, [r0, #14]
 80061ce:	6183      	str	r3, [r0, #24]
 80061d0:	4619      	mov	r1, r3
 80061d2:	2208      	movs	r2, #8
 80061d4:	305c      	adds	r0, #92	; 0x5c
 80061d6:	f7ff f937 	bl	8005448 <memset>
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <std+0x38>)
 80061dc:	6263      	str	r3, [r4, #36]	; 0x24
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x3c>)
 80061e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x40>)
 80061e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <std+0x44>)
 80061e8:	6224      	str	r4, [r4, #32]
 80061ea:	6323      	str	r3, [r4, #48]	; 0x30
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	bf00      	nop
 80061f0:	08006485 	.word	0x08006485
 80061f4:	080064a7 	.word	0x080064a7
 80061f8:	080064df 	.word	0x080064df
 80061fc:	08006503 	.word	0x08006503

08006200 <_cleanup_r>:
 8006200:	4901      	ldr	r1, [pc, #4]	; (8006208 <_cleanup_r+0x8>)
 8006202:	f000 b8af 	b.w	8006364 <_fwalk_reent>
 8006206:	bf00      	nop
 8006208:	08006141 	.word	0x08006141

0800620c <__sfmoreglue>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	2268      	movs	r2, #104	; 0x68
 8006210:	1e4d      	subs	r5, r1, #1
 8006212:	4355      	muls	r5, r2
 8006214:	460e      	mov	r6, r1
 8006216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800621a:	f7ff f989 	bl	8005530 <_malloc_r>
 800621e:	4604      	mov	r4, r0
 8006220:	b140      	cbz	r0, 8006234 <__sfmoreglue+0x28>
 8006222:	2100      	movs	r1, #0
 8006224:	e9c0 1600 	strd	r1, r6, [r0]
 8006228:	300c      	adds	r0, #12
 800622a:	60a0      	str	r0, [r4, #8]
 800622c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006230:	f7ff f90a 	bl	8005448 <memset>
 8006234:	4620      	mov	r0, r4
 8006236:	bd70      	pop	{r4, r5, r6, pc}

08006238 <__sfp_lock_acquire>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__sfp_lock_acquire+0x8>)
 800623a:	f7ff b8e4 	b.w	8005406 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	200006c9 	.word	0x200006c9

08006244 <__sfp_lock_release>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__sfp_lock_release+0x8>)
 8006246:	f7ff b8df 	b.w	8005408 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	200006c9 	.word	0x200006c9

08006250 <__sinit_lock_acquire>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__sinit_lock_acquire+0x8>)
 8006252:	f7ff b8d8 	b.w	8005406 <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	200006ca 	.word	0x200006ca

0800625c <__sinit_lock_release>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__sinit_lock_release+0x8>)
 800625e:	f7ff b8d3 	b.w	8005408 <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	200006ca 	.word	0x200006ca

08006268 <__sinit>:
 8006268:	b510      	push	{r4, lr}
 800626a:	4604      	mov	r4, r0
 800626c:	f7ff fff0 	bl	8006250 <__sinit_lock_acquire>
 8006270:	69a3      	ldr	r3, [r4, #24]
 8006272:	b11b      	cbz	r3, 800627c <__sinit+0x14>
 8006274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006278:	f7ff bff0 	b.w	800625c <__sinit_lock_release>
 800627c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006280:	6523      	str	r3, [r4, #80]	; 0x50
 8006282:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <__sinit+0x68>)
 8006284:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <__sinit+0x6c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	62a2      	str	r2, [r4, #40]	; 0x28
 800628a:	42a3      	cmp	r3, r4
 800628c:	bf04      	itt	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	61a3      	streq	r3, [r4, #24]
 8006292:	4620      	mov	r0, r4
 8006294:	f000 f820 	bl	80062d8 <__sfp>
 8006298:	6060      	str	r0, [r4, #4]
 800629a:	4620      	mov	r0, r4
 800629c:	f000 f81c 	bl	80062d8 <__sfp>
 80062a0:	60a0      	str	r0, [r4, #8]
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 f818 	bl	80062d8 <__sfp>
 80062a8:	2200      	movs	r2, #0
 80062aa:	60e0      	str	r0, [r4, #12]
 80062ac:	2104      	movs	r1, #4
 80062ae:	6860      	ldr	r0, [r4, #4]
 80062b0:	f7ff ff82 	bl	80061b8 <std>
 80062b4:	68a0      	ldr	r0, [r4, #8]
 80062b6:	2201      	movs	r2, #1
 80062b8:	2109      	movs	r1, #9
 80062ba:	f7ff ff7d 	bl	80061b8 <std>
 80062be:	68e0      	ldr	r0, [r4, #12]
 80062c0:	2202      	movs	r2, #2
 80062c2:	2112      	movs	r1, #18
 80062c4:	f7ff ff78 	bl	80061b8 <std>
 80062c8:	2301      	movs	r3, #1
 80062ca:	61a3      	str	r3, [r4, #24]
 80062cc:	e7d2      	b.n	8006274 <__sinit+0xc>
 80062ce:	bf00      	nop
 80062d0:	080070f0 	.word	0x080070f0
 80062d4:	08006201 	.word	0x08006201

080062d8 <__sfp>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	4607      	mov	r7, r0
 80062dc:	f7ff ffac 	bl	8006238 <__sfp_lock_acquire>
 80062e0:	4b1e      	ldr	r3, [pc, #120]	; (800635c <__sfp+0x84>)
 80062e2:	681e      	ldr	r6, [r3, #0]
 80062e4:	69b3      	ldr	r3, [r6, #24]
 80062e6:	b913      	cbnz	r3, 80062ee <__sfp+0x16>
 80062e8:	4630      	mov	r0, r6
 80062ea:	f7ff ffbd 	bl	8006268 <__sinit>
 80062ee:	3648      	adds	r6, #72	; 0x48
 80062f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	d503      	bpl.n	8006300 <__sfp+0x28>
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	b30b      	cbz	r3, 8006340 <__sfp+0x68>
 80062fc:	6836      	ldr	r6, [r6, #0]
 80062fe:	e7f7      	b.n	80062f0 <__sfp+0x18>
 8006300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006304:	b9d5      	cbnz	r5, 800633c <__sfp+0x64>
 8006306:	4b16      	ldr	r3, [pc, #88]	; (8006360 <__sfp+0x88>)
 8006308:	60e3      	str	r3, [r4, #12]
 800630a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800630e:	6665      	str	r5, [r4, #100]	; 0x64
 8006310:	f7ff f878 	bl	8005404 <__retarget_lock_init_recursive>
 8006314:	f7ff ff96 	bl	8006244 <__sfp_lock_release>
 8006318:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800631c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006320:	6025      	str	r5, [r4, #0]
 8006322:	61a5      	str	r5, [r4, #24]
 8006324:	2208      	movs	r2, #8
 8006326:	4629      	mov	r1, r5
 8006328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800632c:	f7ff f88c 	bl	8005448 <memset>
 8006330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006338:	4620      	mov	r0, r4
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633c:	3468      	adds	r4, #104	; 0x68
 800633e:	e7d9      	b.n	80062f4 <__sfp+0x1c>
 8006340:	2104      	movs	r1, #4
 8006342:	4638      	mov	r0, r7
 8006344:	f7ff ff62 	bl	800620c <__sfmoreglue>
 8006348:	4604      	mov	r4, r0
 800634a:	6030      	str	r0, [r6, #0]
 800634c:	2800      	cmp	r0, #0
 800634e:	d1d5      	bne.n	80062fc <__sfp+0x24>
 8006350:	f7ff ff78 	bl	8006244 <__sfp_lock_release>
 8006354:	230c      	movs	r3, #12
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	e7ee      	b.n	8006338 <__sfp+0x60>
 800635a:	bf00      	nop
 800635c:	080070f0 	.word	0x080070f0
 8006360:	ffff0001 	.word	0xffff0001

08006364 <_fwalk_reent>:
 8006364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006368:	4606      	mov	r6, r0
 800636a:	4688      	mov	r8, r1
 800636c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006370:	2700      	movs	r7, #0
 8006372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006376:	f1b9 0901 	subs.w	r9, r9, #1
 800637a:	d505      	bpl.n	8006388 <_fwalk_reent+0x24>
 800637c:	6824      	ldr	r4, [r4, #0]
 800637e:	2c00      	cmp	r4, #0
 8006380:	d1f7      	bne.n	8006372 <_fwalk_reent+0xe>
 8006382:	4638      	mov	r0, r7
 8006384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006388:	89ab      	ldrh	r3, [r5, #12]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d907      	bls.n	800639e <_fwalk_reent+0x3a>
 800638e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006392:	3301      	adds	r3, #1
 8006394:	d003      	beq.n	800639e <_fwalk_reent+0x3a>
 8006396:	4629      	mov	r1, r5
 8006398:	4630      	mov	r0, r6
 800639a:	47c0      	blx	r8
 800639c:	4307      	orrs	r7, r0
 800639e:	3568      	adds	r5, #104	; 0x68
 80063a0:	e7e9      	b.n	8006376 <_fwalk_reent+0x12>

080063a2 <__swhatbuf_r>:
 80063a2:	b570      	push	{r4, r5, r6, lr}
 80063a4:	460e      	mov	r6, r1
 80063a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063aa:	2900      	cmp	r1, #0
 80063ac:	b096      	sub	sp, #88	; 0x58
 80063ae:	4614      	mov	r4, r2
 80063b0:	461d      	mov	r5, r3
 80063b2:	da08      	bge.n	80063c6 <__swhatbuf_r+0x24>
 80063b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	602a      	str	r2, [r5, #0]
 80063bc:	061a      	lsls	r2, r3, #24
 80063be:	d410      	bmi.n	80063e2 <__swhatbuf_r+0x40>
 80063c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c4:	e00e      	b.n	80063e4 <__swhatbuf_r+0x42>
 80063c6:	466a      	mov	r2, sp
 80063c8:	f000 f8c2 	bl	8006550 <_fstat_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	dbf1      	blt.n	80063b4 <__swhatbuf_r+0x12>
 80063d0:	9a01      	ldr	r2, [sp, #4]
 80063d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063da:	425a      	negs	r2, r3
 80063dc:	415a      	adcs	r2, r3
 80063de:	602a      	str	r2, [r5, #0]
 80063e0:	e7ee      	b.n	80063c0 <__swhatbuf_r+0x1e>
 80063e2:	2340      	movs	r3, #64	; 0x40
 80063e4:	2000      	movs	r0, #0
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	b016      	add	sp, #88	; 0x58
 80063ea:	bd70      	pop	{r4, r5, r6, pc}

080063ec <__smakebuf_r>:
 80063ec:	898b      	ldrh	r3, [r1, #12]
 80063ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063f0:	079d      	lsls	r5, r3, #30
 80063f2:	4606      	mov	r6, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	d507      	bpl.n	8006408 <__smakebuf_r+0x1c>
 80063f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	2301      	movs	r3, #1
 8006402:	6163      	str	r3, [r4, #20]
 8006404:	b002      	add	sp, #8
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	ab01      	add	r3, sp, #4
 800640a:	466a      	mov	r2, sp
 800640c:	f7ff ffc9 	bl	80063a2 <__swhatbuf_r>
 8006410:	9900      	ldr	r1, [sp, #0]
 8006412:	4605      	mov	r5, r0
 8006414:	4630      	mov	r0, r6
 8006416:	f7ff f88b 	bl	8005530 <_malloc_r>
 800641a:	b948      	cbnz	r0, 8006430 <__smakebuf_r+0x44>
 800641c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006420:	059a      	lsls	r2, r3, #22
 8006422:	d4ef      	bmi.n	8006404 <__smakebuf_r+0x18>
 8006424:	f023 0303 	bic.w	r3, r3, #3
 8006428:	f043 0302 	orr.w	r3, r3, #2
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	e7e3      	b.n	80063f8 <__smakebuf_r+0xc>
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <__smakebuf_r+0x7c>)
 8006432:	62b3      	str	r3, [r6, #40]	; 0x28
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	6020      	str	r0, [r4, #0]
 8006438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	9b00      	ldr	r3, [sp, #0]
 8006440:	6163      	str	r3, [r4, #20]
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	6120      	str	r0, [r4, #16]
 8006446:	b15b      	cbz	r3, 8006460 <__smakebuf_r+0x74>
 8006448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800644c:	4630      	mov	r0, r6
 800644e:	f000 f891 	bl	8006574 <_isatty_r>
 8006452:	b128      	cbz	r0, 8006460 <__smakebuf_r+0x74>
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	89a0      	ldrh	r0, [r4, #12]
 8006462:	4305      	orrs	r5, r0
 8006464:	81a5      	strh	r5, [r4, #12]
 8006466:	e7cd      	b.n	8006404 <__smakebuf_r+0x18>
 8006468:	08006201 	.word	0x08006201

0800646c <__malloc_lock>:
 800646c:	4801      	ldr	r0, [pc, #4]	; (8006474 <__malloc_lock+0x8>)
 800646e:	f7fe bfca 	b.w	8005406 <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	200006c8 	.word	0x200006c8

08006478 <__malloc_unlock>:
 8006478:	4801      	ldr	r0, [pc, #4]	; (8006480 <__malloc_unlock+0x8>)
 800647a:	f7fe bfc5 	b.w	8005408 <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	200006c8 	.word	0x200006c8

08006484 <__sread>:
 8006484:	b510      	push	{r4, lr}
 8006486:	460c      	mov	r4, r1
 8006488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648c:	f000 f894 	bl	80065b8 <_read_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	bfab      	itete	ge
 8006494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006496:	89a3      	ldrhlt	r3, [r4, #12]
 8006498:	181b      	addge	r3, r3, r0
 800649a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800649e:	bfac      	ite	ge
 80064a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064a2:	81a3      	strhlt	r3, [r4, #12]
 80064a4:	bd10      	pop	{r4, pc}

080064a6 <__swrite>:
 80064a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064aa:	461f      	mov	r7, r3
 80064ac:	898b      	ldrh	r3, [r1, #12]
 80064ae:	05db      	lsls	r3, r3, #23
 80064b0:	4605      	mov	r5, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4616      	mov	r6, r2
 80064b6:	d505      	bpl.n	80064c4 <__swrite+0x1e>
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	2302      	movs	r3, #2
 80064be:	2200      	movs	r2, #0
 80064c0:	f000 f868 	bl	8006594 <_lseek_r>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	4632      	mov	r2, r6
 80064d2:	463b      	mov	r3, r7
 80064d4:	4628      	mov	r0, r5
 80064d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	f000 b817 	b.w	800650c <_write_r>

080064de <__sseek>:
 80064de:	b510      	push	{r4, lr}
 80064e0:	460c      	mov	r4, r1
 80064e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e6:	f000 f855 	bl	8006594 <_lseek_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	bf15      	itete	ne
 80064f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80064f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064fa:	81a3      	strheq	r3, [r4, #12]
 80064fc:	bf18      	it	ne
 80064fe:	81a3      	strhne	r3, [r4, #12]
 8006500:	bd10      	pop	{r4, pc}

08006502 <__sclose>:
 8006502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006506:	f000 b813 	b.w	8006530 <_close_r>
	...

0800650c <_write_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_write_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fc f8e1 	bl	80026e2 <_write>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_write_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_write_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	200006d4 	.word	0x200006d4

08006530 <_close_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	; (800654c <_close_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fc f8ed 	bl	800271a <_close>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_close_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_close_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	200006d4 	.word	0x200006d4

08006550 <_fstat_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d07      	ldr	r5, [pc, #28]	; (8006570 <_fstat_r+0x20>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	4611      	mov	r1, r2
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	f7fc f8e8 	bl	8002732 <_fstat>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d102      	bne.n	800656c <_fstat_r+0x1c>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	b103      	cbz	r3, 800656c <_fstat_r+0x1c>
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	bd38      	pop	{r3, r4, r5, pc}
 800656e:	bf00      	nop
 8006570:	200006d4 	.word	0x200006d4

08006574 <_isatty_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d06      	ldr	r5, [pc, #24]	; (8006590 <_isatty_r+0x1c>)
 8006578:	2300      	movs	r3, #0
 800657a:	4604      	mov	r4, r0
 800657c:	4608      	mov	r0, r1
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	f7fc f8e7 	bl	8002752 <_isatty>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_isatty_r+0x1a>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_isatty_r+0x1a>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200006d4 	.word	0x200006d4

08006594 <_lseek_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4d07      	ldr	r5, [pc, #28]	; (80065b4 <_lseek_r+0x20>)
 8006598:	4604      	mov	r4, r0
 800659a:	4608      	mov	r0, r1
 800659c:	4611      	mov	r1, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	602a      	str	r2, [r5, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f7fc f8e0 	bl	8002768 <_lseek>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_lseek_r+0x1e>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_lseek_r+0x1e>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	200006d4 	.word	0x200006d4

080065b8 <_read_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d07      	ldr	r5, [pc, #28]	; (80065d8 <_read_r+0x20>)
 80065bc:	4604      	mov	r4, r0
 80065be:	4608      	mov	r0, r1
 80065c0:	4611      	mov	r1, r2
 80065c2:	2200      	movs	r2, #0
 80065c4:	602a      	str	r2, [r5, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f7fc f86e 	bl	80026a8 <_read>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_read_r+0x1e>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_read_r+0x1e>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	200006d4 	.word	0x200006d4

080065dc <_init>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

080065e8 <_fini>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr
